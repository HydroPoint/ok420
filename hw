

//Pantalla//
#include "U8glib.h"
U8GLIB_SH1106_128X64 u8g(U8G_I2C_OPT_DEV_0 | U8G_I2C_OPT_FAST);  // Dev 0, Fast I2C / TWI
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>
#define OLED_RESET 4
Adafruit_SH1106 display1(OLED_RESET);
Adafruit_SH1106 display2(OLED_RESET);
#define ANCHO 128
#define ALTO 64
#define Distancia_H 56
#if (SH1106_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SH1106.h!");
#endif
#define i2c_Address 0x3c
int Loop_WIFI = 0;

unsigned long Tiempo_Previo_OLED = 0;
#define intervalo_Oled  10
unsigned long Tiempo_Previo_LOGO = 0;
#define intervalo_LOGO  28650
unsigned long Tiempo_Previo_HOJA = 0;
#define intervalo_HOJA  16870
unsigned long Previo_Reloj = 0;
#define Cada_segundo  1000

static const unsigned char PROGMEM HIDROPONIA[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF1, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF3, 0x81, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFB, 0x81, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x83, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x93, 0x81, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x93, 0x83, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x33, 0x87, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF3, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE3, 0x8F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0xDF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xF5, 0xFC, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x38, 0xF7, 0xF8, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x98, 0x33, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xCC, 0x3B, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x1B, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x0D, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0x0D, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xE0, 0x1F, 0x2D, 0xA7, 0xC7, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0xC3, 0xE5, 0xB3, 0xE0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xE7, 0x11, 0xF8, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xE6, 0x00, 0x78, 0x00, 0x00, 0x0E, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x78, 0x60, 0x00, 0x00, 0xF7, 0xF6, 0x30, 0x1D, 0x80, 0x00, 0x1C, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x78, 0x70, 0x00, 0x00, 0x0E, 0xDE, 0x78, 0x41, 0xC0, 0x00, 0x38, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x78, 0x70, 0x00, 0x00, 0x1C, 0xC4, 0x78, 0x63, 0x80, 0x00, 0x38, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x78, 0x70, 0x00, 0x00, 0x00, 0x84, 0x38, 0x63, 0x80, 0x00, 0x78, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x38, 0x72, 0xF0, 0xFC, 0x3C, 0x04, 0x38, 0xE7, 0x1C, 0x70, 0x70, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x7F, 0xF6, 0xFC, 0xFE, 0x7E, 0x04, 0x3C, 0xE7, 0x3C, 0xF1, 0xF2, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x7F, 0xF6, 0xCE, 0xC6, 0xE7, 0x04, 0x1C, 0xE6, 0x6D, 0xB3, 0xF2, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x7F, 0xF6, 0xC6, 0xC6, 0xC3, 0x04, 0x1C, 0xEE, 0x6D, 0xB3, 0x66, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x78, 0x76, 0xC2, 0xCE, 0xC3, 0x3F, 0x9C, 0xEE, 0xCB, 0x26, 0x66, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x78, 0x76, 0xC2, 0xFC, 0xC3, 0x1F, 0x1C, 0xEC, 0xDB, 0x6E, 0x6E, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x78, 0x76, 0xC6, 0xF8, 0xC3, 0x0E, 0x1D, 0xEC, 0xF3, 0xCC, 0xEC, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x30, 0x76, 0xCE, 0xEC, 0xE6, 0x00, 0x1F, 0xE8, 0xF7, 0xDC, 0xF8, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x30, 0x36, 0xFC, 0xCE, 0x7E, 0x00, 0x0F, 0x78, 0xEF, 0xB7, 0xF8, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x10, 0x12, 0xF0, 0x87, 0x3C, 0x00, 0x0E, 0x70, 0x7D, 0xE7, 0x30, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
  0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x33, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x36, 0xA3, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x66, 0xB9, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x66, 0x9C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0xCE, 0x9E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xCE, 0xCA, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3F, 0x1E, 0x4B, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x1E, 0x49, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x3A, 0x4C, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x2A, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x6A, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x4A, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4B, 0x19, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x49, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x59, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const unsigned char PROGMEM LOGCANN[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0xFF, 0xE0, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0xFF, 0xE0, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0xFF, 0xE0, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0xFF, 0xE0, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x00, 0xFF, 0xE0, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0xFF, 0xE0, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0xFF, 0xE0, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xE0, 0xFF, 0xE0, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0xFF, 0xE1, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0xFF, 0xE3, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0xFF, 0xE3, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0xFF, 0xC7, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0xFF, 0xCF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x7F, 0xCF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x7F, 0xCF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x7F, 0x9F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x3F, 0xBF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xBF, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xBF, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x9F, 0x7F, 0xE0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDF, 0x7F, 0x81, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x1F, 0xFF, 0xFE, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xCF, 0xFF, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xE3, 0xFF, 0xFD, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF9, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8C, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0C, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const unsigned char PROGMEM sd[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x79, 0xE7, 0x9E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3E, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFE, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xF0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xC0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xC0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xE0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xC0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xC0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x78, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0xFE, 0x7F, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0xCE, 0x7F, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0x86, 0x70, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0x82, 0x70, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0xF0, 0x70, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0xFE, 0x70, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x1E, 0x70, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x83, 0x0E, 0x70, 0xF0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0x9E, 0x70, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x81, 0xFE, 0x7F, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0xF8, 0x7F, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const unsigned char PROGMEM M_BT[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7D, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x7C, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xC0, 0x7C, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xE0, 0x7C, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xF0, 0x7C, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xF8, 0x7C, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xFC, 0x7C, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xFE, 0x7C, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xFF, 0x7C, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xFD, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3F, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xF9, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0x78, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xFE, 0x78, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xFC, 0x78, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xF8, 0x78, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xF0, 0x78, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xE0, 0x78, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xC0, 0x78, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x80, 0x78, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x79, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7B, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char myBitmapcash_9 [] PROGMEM = {
  0x0d, 0x80, 0x0d, 0x80, 0x0d, 0x80, 0x3f, 0xf0, 0x7f, 0xf0, 0x6d, 0x80, 0x6d, 0x80, 0x6d, 0x80,
  0x7f, 0xe0, 0x3f, 0xf0, 0x0d, 0xb0, 0x0d, 0xb0, 0x7f, 0xf0, 0x7f, 0xe0, 0x0d, 0x80, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_8 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x0d, 0x80, 0x3f, 0xf0, 0x7f, 0xf0, 0x6d, 0x80, 0x6d, 0x80, 0x6d, 0x80,
  0x7f, 0xe0, 0x3f, 0xf0, 0x0d, 0xb0, 0x0d, 0xb0, 0x7f, 0xf0, 0x7f, 0xe0, 0x0d, 0x80, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_7 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x72, 0x78, 0xc0, 0x08, 0x7f, 0xf0, 0x6d, 0x80, 0x6d, 0x80, 0x6d, 0x80,
  0x7f, 0xe0, 0x3f, 0xf0, 0x0d, 0xb0, 0x0d, 0xb0, 0x7f, 0xf0, 0x7f, 0xe0, 0x0d, 0x80, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_6 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x72, 0x78, 0xc0, 0x08, 0x80, 0x08, 0x92, 0x78, 0x92, 0x40, 0x92, 0x60,
  0x7f, 0xe0, 0x3f, 0xf0, 0x0d, 0xb0, 0x0d, 0xb0, 0x7f, 0xf0, 0x7f, 0xe0, 0x0d, 0x80, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_5 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x72, 0x78, 0xc0, 0x08, 0x80, 0x08, 0x92, 0x78, 0x92, 0x40, 0x92, 0x70,
  0x80, 0x18, 0x40, 0x08, 0x0d, 0xb0, 0x0d, 0xb0, 0x7f, 0xf0, 0x7f, 0xe0, 0x0d, 0x80, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_4 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x72, 0x78, 0xc0, 0x08, 0x80, 0x08, 0x92, 0x78, 0x92, 0x40, 0x92, 0x70,
  0x80, 0x18, 0x40, 0x08, 0x32, 0x48, 0x0d, 0xb8, 0x7f, 0xf0, 0x7f, 0xe0, 0x0d, 0x80, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_3 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x72, 0x78, 0xc0, 0x08, 0x80, 0x08, 0x92, 0x78, 0x92, 0x40, 0x92, 0x70,
  0x80, 0x18, 0x40, 0x08, 0x32, 0x48, 0xf2, 0x48, 0x80, 0x08, 0x7f, 0xe0, 0x0d, 0x80, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_2 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x72, 0x78, 0xc0, 0x08, 0x80, 0x08, 0x92, 0x78, 0x92, 0x40, 0x92, 0x70,
  0x80, 0x18, 0x40, 0x08, 0x32, 0x48, 0xf2, 0x48, 0x80, 0x08, 0x80, 0x18, 0xf2, 0x70, 0x0d, 0x80,
  0x0d, 0x80
};
const unsigned char myBitmapcash_1 [] PROGMEM = {
  0x1f, 0xc0, 0x12, 0x40, 0x72, 0x78, 0xc0, 0x08, 0x80, 0x08, 0x92, 0x78, 0x92, 0x40, 0x92, 0x70,
  0x80, 0x18, 0x40, 0x08, 0x32, 0x48, 0xf2, 0x48, 0x80, 0x08, 0x80, 0x18, 0xf2, 0x70, 0x12, 0x40,
  0x1f, 0xc0
};

const unsigned char myBitmapagua1_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x18, 0xc0, 0x60,
  0x30, 0x18, 0xc0, 0x60, 0x30, 0x18, 0xc0, 0x60, 0x18, 0x0d, 0x80, 0xc0, 0x18, 0x0d, 0x80, 0xc0,
  0x18, 0x0d, 0x80, 0xc0, 0x18, 0x0d, 0x80, 0xc0, 0x18, 0x07, 0x00, 0xc0, 0x18, 0x07, 0x00, 0xc0,
  0x18, 0x00, 0x00, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua2_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x18, 0xc0, 0x60,
  0x30, 0x18, 0xc0, 0x60, 0x30, 0x18, 0xc0, 0x60, 0x18, 0x0d, 0x80, 0xc0, 0x18, 0x0d, 0x80, 0xc0,
  0x18, 0x0d, 0x80, 0xc0, 0x18, 0x0d, 0x80, 0xc0, 0x18, 0x07, 0x00, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua3_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x18, 0xc0, 0x60,
  0x30, 0x18, 0xc0, 0x60, 0x30, 0x18, 0xc0, 0x60, 0x18, 0x0d, 0x80, 0xc0, 0x18, 0x0d, 0x80, 0xc0,
  0x18, 0x0d, 0x80, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua4_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x18, 0xc0, 0x60,
  0x30, 0x18, 0xc0, 0x60, 0x30, 0x18, 0xc0, 0x60, 0x18, 0x0d, 0x80, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0,
  0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua5_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x18, 0xc0, 0x60,
  0x30, 0x18, 0xc0, 0x60, 0x33, 0xe7, 0x3e, 0x60, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0,
  0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua6_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xe7, 0x3f, 0x60,
  0x37, 0xe7, 0x3f, 0x60, 0x33, 0xe7, 0x3e, 0x60, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0,
  0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua7_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xe7, 0x3f, 0x60,
  0x37, 0xe7, 0x3f, 0x60, 0x33, 0xe7, 0x3e, 0x60, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0,
  0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua8_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x37, 0x9f, 0xcf, 0x20, 0x37, 0xcf, 0x9f, 0x60,
  0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xe7, 0x3f, 0x60,
  0x37, 0xe7, 0x3f, 0x60, 0x33, 0xe7, 0x3e, 0x60, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0,
  0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua9_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x6f, 0xff, 0xff, 0xb0, 0x6f, 0x9f, 0xcf, 0xb0, 0x27, 0x9f, 0xcf, 0x20, 0x37, 0xcf, 0x9f, 0x60,
  0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xe7, 0x3f, 0x60,
  0x37, 0xe7, 0x3f, 0x60, 0x33, 0xe7, 0x3e, 0x60, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0,
  0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua10_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x6f, 0xff, 0xff, 0xb0, 0x6f, 0xff, 0xff, 0xb0,
  0x6f, 0xff, 0xff, 0xb0, 0x6f, 0x9f, 0xcf, 0xb0, 0x27, 0x9f, 0xcf, 0x20, 0x37, 0xcf, 0x9f, 0x60,
  0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xcf, 0x9f, 0x60, 0x37, 0xe7, 0x3f, 0x60,
  0x37, 0xe7, 0x3f, 0x60, 0x33, 0xe7, 0x3e, 0x60, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0,
  0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf2, 0x7e, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0, 0x1b, 0xf8, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapvacio_V [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x60, 0x30, 0x30, 0x30, 0x60, 0x30, 0x60, 0x30, 0x30, 0x60, 0x60,
  0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x30, 0x60, 0x60, 0x30, 0x18, 0xc0, 0x60,
  0x30, 0x18, 0xc0, 0x60, 0x30, 0x18, 0xc0, 0x60, 0x18, 0x0d, 0x80, 0xc0, 0x18, 0x0d, 0x80, 0xc0,
  0x18, 0x0d, 0x80, 0xc0, 0x18, 0x0d, 0x80, 0xc0, 0x18, 0x07, 0x00, 0xc0, 0x18, 0x07, 0x00, 0xc0,
  0x18, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x01, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};

const unsigned char myBitmapagua1_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0f, 0xc0, 0x60,
  0x30, 0x0f, 0xc0, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0,
  0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0,
  0x18, 0x00, 0x00, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua2_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0f, 0xc0, 0x60,
  0x30, 0x0f, 0xc0, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0,
  0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua3_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0f, 0xc0, 0x60,
  0x30, 0x0f, 0xc0, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0,
  0x18, 0x0c, 0x00, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua4_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0f, 0xc0, 0x60,
  0x30, 0x0f, 0xc0, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x18, 0x0c, 0x00, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua5_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0f, 0xc0, 0x60,
  0x30, 0x0f, 0xc0, 0x60, 0x33, 0xf3, 0xfe, 0x60, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua6_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf0, 0x3f, 0x60,
  0x37, 0xf0, 0x3f, 0x60, 0x33, 0xf3, 0xfe, 0x60, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua7_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf0, 0x3f, 0x60,
  0x37, 0xf0, 0x3f, 0x60, 0x33, 0xf3, 0xfe, 0x60, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua8_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x37, 0xf0, 0x0f, 0x60, 0x37, 0xf3, 0xff, 0x60,
  0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf0, 0x3f, 0x60,
  0x37, 0xf0, 0x3f, 0x60, 0x33, 0xf3, 0xfe, 0x60, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua9_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x6f, 0xff, 0xff, 0xb0, 0x67, 0xf0, 0x0f, 0x30, 0x37, 0xf0, 0x0f, 0x60, 0x37, 0xf3, 0xff, 0x60,
  0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf0, 0x3f, 0x60,
  0x37, 0xf0, 0x3f, 0x60, 0x33, 0xf3, 0xfe, 0x60, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua10_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x6f, 0xff, 0xff, 0xb0, 0x6f, 0xff, 0xff, 0xb0,
  0x6f, 0xff, 0xff, 0xb0, 0x67, 0xf0, 0x0f, 0x30, 0x37, 0xf0, 0x0f, 0x60, 0x37, 0xf3, 0xff, 0x60,
  0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf3, 0xff, 0x60, 0x37, 0xf0, 0x3f, 0x60,
  0x37, 0xf0, 0x3f, 0x60, 0x33, 0xf3, 0xfe, 0x60, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0, 0x1b, 0xf3, 0xfe, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapvacio_F [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x0f, 0xf0, 0x30, 0x30, 0x0f, 0xf0, 0x60, 0x30, 0x0c, 0x00, 0x60,
  0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x30, 0x0f, 0xc0, 0x60,
  0x30, 0x0f, 0xc0, 0x60, 0x30, 0x0c, 0x00, 0x60, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0,
  0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0, 0x18, 0x0c, 0x00, 0xc0,
  0x18, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x01, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};

const unsigned char myBitmapBT [] PROGMEM = {
  0x20, 0xb0, 0x68, 0x30, 0x68, 0xb0, 0x20
};

const unsigned char myBitmapwifi [] PROGMEM = {
  0x1f, 0x80, 0x20, 0x40, 0x4f, 0x20, 0x90, 0x90, 0x26, 0x40, 0x06, 0x00
};

const unsigned char myBitmapwifi4 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00
};
const unsigned char myBitmapwifi3 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00
};
const unsigned char myBitmapwifi2 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x10, 0x80, 0x26, 0x40, 0x06, 0x00
};

const unsigned char myBitmapPower_Level1 [] PROGMEM = {
  0x1f, 0xef, 0xde, 0xd0, 0x50, 0xa2, 0xd0, 0xa1, 0x42, 0xd1, 0x42, 0x82, 0xd2, 0x85, 0x02, 0x1d,
  0xfb, 0xfe
};
const unsigned char myBitmapPower_Level2 [] PROGMEM = {
  0x1f, 0xef, 0xde, 0xd0, 0x50, 0xbe, 0xd0, 0xa1, 0x7e, 0xd1, 0x42, 0xfe, 0xd2, 0x85, 0xfe, 0x1d,
  0xfb, 0xfe
};
const unsigned char myBitmapPower_Level3 [] PROGMEM = {
  0x1f, 0xef, 0xde, 0xd0, 0x5f, 0xbe, 0xd0, 0xbf, 0x7e, 0xd1, 0x7e, 0xfe, 0xd2, 0xfd, 0xfe, 0x1d,
  0xfb, 0xfe
};
const unsigned char myBitmapPower_Level4 [] PROGMEM = {
  0x1f, 0xef, 0xde, 0xdf, 0xdf, 0xbe, 0xdf, 0xbf, 0x7e, 0xdf, 0x7e, 0xfe, 0xde, 0xfd, 0xfe, 0x1d,
  0xfb, 0xfe
};
const unsigned char myBitmapPower_Level5 [] PROGMEM = {
  0x00, 0x00, 0x1e, 0xc0, 0x00, 0x3e, 0xc0, 0x00, 0x7e, 0xc0, 0x00, 0xfe, 0xc0, 0x01, 0xfe, 0x00,
  0x03, 0xfe
};
const unsigned char myBitmapPower_Level6 [] PROGMEM = {
  0x00, 0x0f, 0xde, 0xc0, 0x1f, 0xbe, 0xc0, 0x3f, 0x7e, 0xc0, 0x7e, 0xfe, 0xc0, 0xfd, 0xfe, 0x01,
  0xfb, 0xfe
};
const unsigned char myBitmapPower_Level7 [] PROGMEM = {
  0x1f, 0xff, 0xfe, 0xd0, 0x00, 0x02, 0xd0, 0x00, 0x02, 0xd0, 0x00, 0x02, 0xd0, 0x00, 0x02, 0x1f,
  0xff, 0xfe
};
const unsigned char myBitmapPower_Level8 [] PROGMEM = {
  0x1b, 0x6d, 0xb6, 0xd0, 0x00, 0x02, 0xd0, 0x00, 0x00, 0xc0, 0x00, 0x02, 0xd0, 0x00, 0x02, 0x16,
  0xdb, 0x6e
};
const unsigned char myBitmapPower_Level9 [] PROGMEM = {
  0x1f, 0xdf, 0xbe, 0xd0, 0x00, 0x02, 0xd0, 0x00, 0x02, 0xd0, 0x00, 0x02, 0xd0, 0x00, 0x02, 0x1e,
  0xfd, 0xfe
};

const unsigned char myBitmapagua1_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x18, 0x60, 0x00, 0xc0, 0x18, 0x60, 0x00, 0xc0,
  0x18, 0x60, 0x00, 0xc0, 0x18, 0x60, 0x00, 0xc0, 0x18, 0x7f, 0xf0, 0xc0, 0x18, 0x7f, 0xf0, 0xc0,
  0x18, 0x00, 0x00, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua2_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x18, 0x60, 0x00, 0xc0, 0x18, 0x60, 0x00, 0xc0,
  0x18, 0x60, 0x00, 0xc0, 0x18, 0x60, 0x00, 0xc0, 0x18, 0x7f, 0xf0, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua3_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x18, 0x60, 0x00, 0xc0, 0x18, 0x60, 0x00, 0xc0,
  0x18, 0x60, 0x00, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua4_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x18, 0x60, 0x00, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0,
  0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua5_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x33, 0x9f, 0xff, 0x60, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0,
  0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua6_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x33, 0x9f, 0xfe, 0x60, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0,
  0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua8_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x37, 0x80, 0x0f, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x33, 0x9f, 0xfe, 0x60, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0,
  0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua7_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x33, 0x9f, 0xfe, 0x60, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0,
  0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua9_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x6f, 0xff, 0xff, 0xb0, 0x67, 0x80, 0x0f, 0x30, 0x37, 0x80, 0x0f, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x33, 0x9f, 0xfe, 0x60, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0,
  0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapagua10_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x6f, 0xff, 0xff, 0xb0, 0x6f, 0xff, 0xff, 0xb0,
  0x6f, 0xff, 0xff, 0xb0, 0x67, 0x80, 0x0f, 0x30, 0x37, 0x80, 0x0f, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60, 0x37, 0x9f, 0xff, 0x60,
  0x37, 0x9f, 0xff, 0x60, 0x33, 0x9f, 0xfe, 0x60, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0,
  0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x9f, 0xfe, 0xc0, 0x1b, 0x80, 0x0e, 0xc0, 0x1b, 0x80, 0x0e, 0xc0,
  0x1b, 0xff, 0xfe, 0xc0, 0x19, 0xff, 0xfc, 0xc0, 0x0d, 0xff, 0xfd, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmapvacio_C [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x30,
  0x60, 0x00, 0x00, 0x30, 0x60, 0x7f, 0xf0, 0x30, 0x30, 0x7f, 0xf0, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60,
  0x30, 0x60, 0x00, 0x60, 0x30, 0x60, 0x00, 0x60, 0x18, 0x60, 0x00, 0xc0, 0x18, 0x60, 0x00, 0xc0,
  0x18, 0x60, 0x00, 0xc0, 0x18, 0x60, 0x00, 0xc0, 0x18, 0x7f, 0xf0, 0xc0, 0x18, 0x7f, 0xf0, 0xc0,
  0x18, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x01, 0x80, 0x0c, 0x00, 0x01, 0x80,
  0x0f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
};

const unsigned char myBitmapapagado [] PROGMEM = {
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x39, 0xdc, 0x00, 0x30, 0xdc, 0x00, 0x30, 0xdc, 0x00,
  0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30,
  0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0,
  0x00, 0x30, 0xc0, 0x00, 0x30, 0x40, 0x00, 0x60, 0x60, 0x7e, 0xcf, 0x30, 0x01, 0x9f, 0x98, 0x01,
  0x9f, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x8f, 0x18, 0x00, 0xc0, 0x38, 0x00, 0xf0,
  0x70, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80
};
const unsigned char myBitmaptem1 [] PROGMEM = {
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x39, 0xdc, 0x00, 0x30, 0xdc, 0x00, 0x30, 0xdc, 0x00,
  0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30,
  0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0,
  0x00, 0x36, 0xc0, 0x1e, 0x36, 0x40, 0x00, 0x66, 0x60, 0x7e, 0xcf, 0x30, 0x01, 0x9f, 0x98, 0x01,
  0x9f, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x8f, 0x18, 0x00, 0xc0, 0x38, 0x00, 0xf0,
  0x70, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80
};
const unsigned char myBitmaptem2 [] PROGMEM = {
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x39, 0xdc, 0x00, 0x30, 0xdc, 0x00, 0x30, 0xdc, 0x00,
  0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30,
  0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x7e, 0x36, 0xc0,
  0x00, 0x36, 0xc0, 0x1e, 0x36, 0x40, 0x00, 0x66, 0x60, 0x7e, 0xcf, 0x30, 0x01, 0x9f, 0x98, 0x01,
  0x9f, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x8f, 0x18, 0x00, 0xc0, 0x38, 0x00, 0xf0,
  0x70, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80
};
const unsigned char myBitmaptem3 [] PROGMEM = {
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x39, 0xdc, 0x00, 0x30, 0xdc, 0x00, 0x30, 0xdc, 0x00,
  0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30,
  0xc0, 0x7e, 0x30, 0xc0, 0x00, 0x36, 0xc0, 0x1e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x7e, 0x36, 0xc0,
  0x00, 0x36, 0xc0, 0x1e, 0x36, 0x40, 0x00, 0x66, 0x60, 0x7e, 0xcf, 0x30, 0x01, 0x9f, 0x98, 0x01,
  0x9f, 0x98, 0x01, 0x9e, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x8f, 0x18, 0x00, 0xc0, 0x38, 0x00, 0xf0,
  0x70, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80
};
const unsigned char myBitmaptem4 [] PROGMEM = {
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x39, 0xdc, 0x00, 0x30, 0xdc, 0x00, 0x30, 0xdc, 0x00,
  0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30, 0xc0, 0x1e, 0x36, 0xc0, 0x00, 0x36,
  0xc0, 0x7e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x1e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x7e, 0x36, 0xc0,
  0x00, 0x36, 0xc0, 0x1e, 0x36, 0x40, 0x00, 0x66, 0x60, 0x7e, 0xcf, 0x30, 0x01, 0x9f, 0x98, 0x01,
  0x9e, 0x98, 0x01, 0x98, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x8f, 0x18, 0x00, 0xc0, 0x38, 0x00, 0xf0,
  0x70, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80
};
const unsigned char myBitmaptem5 [] PROGMEM = {
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x39, 0xdc, 0x00, 0x30, 0xdc, 0x00, 0x30, 0xdc, 0x1e,
  0x30, 0xc0, 0x00, 0x36, 0xc0, 0x7e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x1e, 0x36, 0xc0, 0x00, 0x36,
  0xc0, 0x7e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x1e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x7e, 0x36, 0xc0,
  0x00, 0x36, 0xc0, 0x1e, 0x36, 0x40, 0x00, 0x66, 0x60, 0x7e, 0xcf, 0x30, 0x01, 0x9f, 0x98, 0x01,
  0x98, 0x98, 0x01, 0x98, 0x98, 0x01, 0x9f, 0x98, 0x01, 0x8f, 0x18, 0x00, 0xc0, 0x38, 0x00, 0xf0,
  0x70, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80
};
const unsigned char myBitmaptem6 [] PROGMEM = {
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x39, 0xdc, 0x00, 0x30, 0xdc, 0x00, 0x36, 0xdc, 0x7e,
  0x36, 0xc0, 0x00, 0x36, 0xc0, 0x1e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x0e, 0x36, 0xc0, 0x00, 0x36,
  0xc0, 0x3e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x0e, 0x36, 0xc0, 0x00, 0x36, 0xc0, 0x1e, 0x36, 0xc0,
  0x00, 0x36, 0xc0, 0x06, 0x36, 0x40, 0x00, 0x66, 0x60, 0x00, 0xcf, 0x30, 0x01, 0x99, 0x98, 0x01,
  0x90, 0x98, 0x01, 0x90, 0x98, 0x01, 0x99, 0x98, 0x01, 0x8f, 0x18, 0x00, 0xc0, 0x38, 0x00, 0xf0,
  0x70, 0x00, 0x7f, 0xe0, 0x00, 0x1f, 0x80
};

const unsigned char myBitmapSD [] PROGMEM = {
  0x3c, 0x44, 0x84, 0x84, 0x84, 0x84, 0xfc
};

const unsigned char myBitmap36 [] PROGMEM = {
  0x00, 0xff, 0x00, 0x00, 0x01, 0x83, 0xe0, 0x00, 0x03, 0x7f, 0xf8, 0x00, 0x06, 0x01, 0xfc, 0x00,
  0x0c, 0x1f, 0xfe, 0x00, 0x1c, 0x01, 0xfe, 0x00, 0x3f, 0x01, 0xff, 0x00, 0x3f, 0x81, 0xf1, 0x80,
  0x7f, 0xc1, 0xf1, 0x80, 0x7f, 0xc1, 0xe0, 0xc0, 0xff, 0xdc, 0x02, 0xc0, 0xf7, 0x9f, 0x0a, 0xc0,
  0xd4, 0x3f, 0x0a, 0xc0, 0xd4, 0x3f, 0x02, 0xc0, 0xd4, 0x1e, 0x0a, 0xc0, 0xd4, 0xcc, 0xfb, 0xc0,
  0xd0, 0xe1, 0xff, 0xc0, 0xd1, 0xf1, 0xff, 0x80, 0x61, 0xf1, 0xff, 0x80, 0x73, 0xf0, 0x7f, 0x00,
  0x3f, 0xff, 0x07, 0x00, 0x1f, 0xe0, 0x06, 0x00, 0x0f, 0xff, 0xdc, 0x00, 0x07, 0xf0, 0x38, 0x00,
  0x03, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xc0, 0x00
};
const unsigned char myBitmap72 [] PROGMEM = {
  0x00, 0x0c, 0x80, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x01, 0xf0, 0x30, 0x00, 0x0f, 0xf9, 0x18, 0x00,
  0x1f, 0xf8, 0x4e, 0x00, 0x17, 0xfc, 0x76, 0x00, 0x3f, 0xfc, 0x7f, 0x00, 0x27, 0xf8, 0x3f, 0x00,
  0x46, 0xf8, 0x3f, 0x00, 0xc4, 0x20, 0x7f, 0x00, 0xd0, 0x1e, 0xff, 0x80, 0xc0, 0x3f, 0x7f, 0x80,
  0xc0, 0x3f, 0x7f, 0xc0, 0xcf, 0xbf, 0x1e, 0xc0, 0x5f, 0xff, 0x08, 0x80, 0x7f, 0xde, 0x00, 0xc0,
  0x3f, 0x81, 0x08, 0xc0, 0x3f, 0x87, 0x98, 0x80, 0x3f, 0x07, 0xf9, 0x80, 0x1f, 0x8f, 0xff, 0x00,
  0x1f, 0x0f, 0xfe, 0x00, 0x1c, 0x07, 0xfc, 0x00, 0x0e, 0x27, 0xf8, 0x00, 0x07, 0x23, 0xf0, 0x00,
  0x01, 0xff, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00
};
const unsigned char myBitmap108 [] PROGMEM = {
  0x00, 0x7c, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x03, 0x1f, 0xe0, 0x00, 0x0e, 0x7f, 0xd8, 0x00,
  0x1c, 0x4f, 0xee, 0x00, 0x18, 0xff, 0xe7, 0x00, 0x10, 0x0f, 0xc3, 0x00, 0x20, 0x0f, 0xc1, 0x80,
  0x2e, 0x0f, 0x84, 0x80, 0x3f, 0x81, 0x0c, 0x80, 0x7f, 0xde, 0x0e, 0x80, 0x7f, 0xff, 0x0a, 0xc0,
  0x7f, 0xbf, 0x1f, 0xc0, 0xff, 0xbf, 0x7f, 0xc0, 0xf4, 0x3f, 0x7f, 0x80, 0x54, 0x1e, 0xff, 0x80,
  0xcc, 0x20, 0x7f, 0x80, 0x40, 0x78, 0x3f, 0x00, 0x60, 0xf8, 0x3f, 0x00, 0x30, 0xfc, 0x07, 0x00,
  0x38, 0xff, 0xc6, 0x00, 0x1c, 0xff, 0x8c, 0x00, 0x0e, 0xff, 0x1c, 0x00, 0x01, 0xfe, 0xf8, 0x00,
  0x00, 0x3f, 0x80, 0x00, 0x00, 0x0c, 0x00, 0x00
};
const unsigned char myBitmap144 [] PROGMEM = {
  0x00, 0x3f, 0x00, 0x00, 0x00, 0xfb, 0xe0, 0x00, 0x01, 0x80, 0x30, 0x00, 0x03, 0x07, 0xf8, 0x00,
  0x0f, 0xc3, 0x7c, 0x00, 0x1f, 0xe7, 0xfc, 0x00, 0x3f, 0xe0, 0xfe, 0x00, 0x7f, 0xe0, 0xff, 0x00,
  0x7f, 0xf1, 0xff, 0x80, 0x47, 0xf1, 0xfc, 0x80, 0xc4, 0xde, 0xf8, 0x80, 0xd0, 0x3f, 0x70, 0xc0,
  0x94, 0x3f, 0x00, 0xc0, 0xc0, 0x3f, 0x00, 0x40, 0xc1, 0x9f, 0x0e, 0xc0, 0xc7, 0xdc, 0x8c, 0xc0,
  0x4f, 0xe1, 0xfa, 0x80, 0x7f, 0xc3, 0xff, 0x80, 0x3f, 0xc3, 0xfd, 0x00, 0x1f, 0xc3, 0xff, 0x00,
  0x0f, 0xf3, 0xfe, 0x00, 0x0f, 0xf1, 0xfc, 0x00, 0x07, 0x98, 0xf0, 0x00, 0x03, 0xc0, 0xe0, 0x00,
  0x00, 0xf7, 0xc0, 0x00, 0x00, 0x1e, 0x00, 0x00
};
const unsigned char myBitmap180 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x03, 0xfc, 0x78, 0x00, 0x06, 0xfe, 0x1c, 0x00,
  0x09, 0xff, 0x26, 0x00, 0x12, 0x7f, 0x03, 0x00, 0x35, 0xfe, 0x27, 0x00, 0x78, 0x3e, 0x35, 0x80,
  0x60, 0x1e, 0x17, 0x80, 0x40, 0x00, 0x1f, 0x80, 0x5e, 0x1e, 0x3f, 0x80, 0x7f, 0xbf, 0x7f, 0x80,
  0x7f, 0xbf, 0x7f, 0x80, 0x7f, 0xbf, 0x7f, 0x80, 0x7f, 0xbf, 0x7f, 0x80, 0x7e, 0x1e, 0x1e, 0x80,
  0x7e, 0x00, 0x00, 0x80, 0x7e, 0x1e, 0x01, 0x80, 0x2b, 0x1e, 0x05, 0x00, 0x39, 0x7f, 0x7b, 0x00,
  0x18, 0x7f, 0x93, 0x00, 0x08, 0x7f, 0xe6, 0x00, 0x0e, 0x3f, 0x9c, 0x00, 0x07, 0xff, 0xf0, 0x00,
  0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myBitmap216 [] PROGMEM = {
  0x00, 0x3f, 0x00, 0x00, 0x01, 0xf7, 0xc0, 0x00, 0x03, 0x81, 0xe0, 0x00, 0x06, 0x5b, 0xf0, 0x00,
  0x0c, 0x0d, 0xfc, 0x00, 0x0e, 0x0b, 0xf2, 0x00, 0x1f, 0x83, 0xf3, 0x00, 0x3f, 0xc3, 0xf1, 0x80,
  0x7f, 0xc3, 0xf1, 0x80, 0x7f, 0xe1, 0xc0, 0x80, 0x7f, 0xde, 0x80, 0xc0, 0xff, 0x9f, 0x0e, 0xc0,
  0x48, 0x3f, 0x0e, 0x40, 0x7c, 0x3f, 0x05, 0xc0, 0x5c, 0x3f, 0x7e, 0x40, 0xc0, 0x4e, 0xff, 0xc0,
  0x43, 0xe1, 0xff, 0x80, 0x67, 0xf0, 0xff, 0x80, 0x67, 0xf0, 0xff, 0x00, 0x3f, 0xf0, 0x7e, 0x00,
  0x1f, 0xf4, 0x1c, 0x00, 0x0f, 0xfe, 0x0c, 0x00, 0x03, 0xf6, 0x18, 0x00, 0x01, 0xc0, 0x70, 0x00,
  0x00, 0xfb, 0xe0, 0x00, 0x00, 0x37, 0x00, 0x00
};
const unsigned char myBitmap252 [] PROGMEM = {
  0x00, 0x0e, 0x80, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x01, 0xf1, 0x38, 0x00, 0x07, 0xf9, 0x1c, 0x00,
  0x0f, 0xf8, 0x0e, 0x00, 0x1f, 0xfc, 0x3e, 0x00, 0x3f, 0xfc, 0x7f, 0x00, 0x67, 0xf8, 0x3f, 0x00,
  0x46, 0x78, 0x7f, 0x00, 0xc4, 0x20, 0x7f, 0x80, 0xc0, 0x1e, 0xff, 0x80, 0x44, 0x3f, 0xfe, 0x80,
  0xde, 0x3f, 0x7c, 0xc0, 0xff, 0xbf, 0x00, 0xc0, 0x7f, 0xbf, 0x00, 0xc0, 0x7f, 0xde, 0x03, 0xc0,
  0x3f, 0x81, 0x08, 0xc0, 0x3f, 0x07, 0xd8, 0x80, 0x3f, 0x07, 0xf9, 0x80, 0x1f, 0x8f, 0xff, 0x00,
  0x1b, 0x8f, 0xfb, 0x00, 0x1c, 0x87, 0xfe, 0x00, 0x06, 0x27, 0xfc, 0x00, 0x03, 0x23, 0xf0, 0x00,
  0x01, 0xff, 0x80, 0x00, 0x00, 0x6c, 0x00, 0x00
};
const unsigned char myBitmap288 [] PROGMEM = {
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x03, 0xdf, 0xe0, 0x00, 0x0e, 0x3f, 0xdc, 0x00,
  0x0c, 0x7f, 0xee, 0x00, 0x18, 0xff, 0xe7, 0x00, 0x38, 0x0f, 0xc3, 0x00, 0x3f, 0x07, 0xc1, 0x80,
  0x3f, 0x87, 0x80, 0x80, 0x3f, 0x81, 0x00, 0xc0, 0x7f, 0xde, 0x0a, 0xc0, 0x7f, 0xbf, 0x0b, 0xc0,
  0x7f, 0xbf, 0x3f, 0xc0, 0xfe, 0x3f, 0x7f, 0xc0, 0xd4, 0x3f, 0xff, 0x80, 0x54, 0x1e, 0xff, 0x80,
  0x4c, 0x20, 0x7f, 0x80, 0x48, 0x7c, 0x1d, 0x00, 0x60, 0xfc, 0x01, 0x00, 0x30, 0xfc, 0x03, 0x00,
  0x38, 0xff, 0xc6, 0x00, 0x1d, 0xfc, 0x8e, 0x00, 0x06, 0xff, 0x9c, 0x00, 0x03, 0xfe, 0xb8, 0x00,
  0x00, 0x3f, 0xe0, 0x00, 0x00, 0x0f, 0x80, 0x00
};
const unsigned char myBitmap324 [] PROGMEM = {
  0x00, 0x1e, 0x00, 0x00, 0x00, 0xfb, 0xc0, 0x00, 0x01, 0xc0, 0xf0, 0x00, 0x03, 0xc6, 0x78, 0x00,
  0x0f, 0xe3, 0xfc, 0x00, 0x1f, 0xf7, 0xfc, 0x00, 0x3f, 0xf0, 0xfe, 0x00, 0x2f, 0xf0, 0xff, 0x00,
  0x6f, 0xf0, 0xff, 0x80, 0x57, 0xe1, 0xfc, 0x80, 0xc4, 0x4e, 0xf8, 0xc0, 0xdc, 0x3e, 0x70, 0xc0,
  0x90, 0x3f, 0x00, 0xc0, 0xc0, 0x3f, 0x00, 0x40, 0xc1, 0xbf, 0x02, 0xc0, 0x47, 0xde, 0xcc, 0xc0,
  0x4f, 0xe1, 0xf8, 0x80, 0x7f, 0xe3, 0xff, 0x80, 0x3f, 0xc1, 0xff, 0x80, 0x1f, 0xc1, 0xff, 0x00,
  0x0f, 0xf9, 0xfe, 0x00, 0x0f, 0xb0, 0xfc, 0x00, 0x07, 0xf0, 0x30, 0x00, 0x03, 0x00, 0x20, 0x00,
  0x01, 0xf7, 0xc0, 0x00, 0x00, 0x3f, 0x00, 0x00
};
const unsigned char myBitmap360 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x06, 0x7f, 0x1c, 0x00,
  0x09, 0xff, 0xa4, 0x00, 0x12, 0x7f, 0x86, 0x00, 0x37, 0xbf, 0xa7, 0x00, 0x28, 0x1f, 0x37, 0x00,
  0x60, 0x1e, 0x1f, 0x80, 0x40, 0x00, 0x1f, 0x80, 0x5e, 0x1e, 0x1f, 0x80, 0x7f, 0xbf, 0x7f, 0x80,
  0x7f, 0xbf, 0x7f, 0x80, 0x7f, 0xbf, 0x7f, 0x80, 0x7f, 0xbf, 0x7f, 0x80, 0x7f, 0x1e, 0x1e, 0x80,
  0x7e, 0x00, 0x00, 0x80, 0x7a, 0x1e, 0x01, 0x80, 0x6b, 0x1f, 0x07, 0x80, 0x39, 0x1f, 0xeb, 0x00,
  0x30, 0x3f, 0x93, 0x00, 0x19, 0x3f, 0xe6, 0x00, 0x0f, 0x1f, 0xdc, 0x00, 0x07, 0x8f, 0xf8, 0x00,
  0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char myBitmapKw_9 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0xff, 0x80, 0x03, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x0f,
  0xf8, 0x00, 0x1f, 0xf0, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xfc, 0x00, 0xff, 0xf8,
  0x00, 0x03, 0xf0, 0x00, 0x03, 0xe0, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_8 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x03, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x0f,
  0xf8, 0x00, 0x1f, 0xf0, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xfc, 0x00, 0xff, 0xf8,
  0x00, 0x03, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_7 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x02, 0x07, 0x00, 0x06, 0x0e, 0x00, 0x07, 0xfc, 0x00, 0x0f,
  0xf8, 0x00, 0x1f, 0xf0, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xfc, 0x00, 0xff, 0xf8,
  0x00, 0x03, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_6 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x02, 0x07, 0x00, 0x06, 0x0e, 0x00, 0x04, 0x1c, 0x00, 0x0c,
  0x38, 0x00, 0x1f, 0xf0, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xfc, 0x00, 0xff, 0xf8,
  0x00, 0x03, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_5 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x02, 0x07, 0x00, 0x06, 0x0e, 0x00, 0x04, 0x1c, 0x00, 0x0c,
  0x38, 0x00, 0x18, 0x70, 0x00, 0x30, 0x7f, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xfc, 0x00, 0xff, 0xf8,
  0x00, 0x03, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_4 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x02, 0x07, 0x00, 0x06, 0x0e, 0x00, 0x04, 0x1c, 0x00, 0x0c,
  0x38, 0x00, 0x18, 0x70, 0x00, 0x30, 0x7f, 0x00, 0x20, 0x06, 0x00, 0x7f, 0x8c, 0x00, 0xff, 0xf8,
  0x00, 0x03, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_2 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x02, 0x07, 0x00, 0x06, 0x0e, 0x00, 0x04, 0x1c, 0x00, 0x0c,
  0x38, 0x00, 0x18, 0x70, 0x00, 0x30, 0x7f, 0x00, 0x20, 0x06, 0x00, 0x7f, 0x8c, 0x00, 0xff, 0x98,
  0x00, 0x03, 0x30, 0x00, 0x06, 0x60, 0x00, 0x04, 0xc0, 0x00, 0x0d, 0x80, 0x00, 0x1b, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_3 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x02, 0x07, 0x00, 0x06, 0x0e, 0x00, 0x04, 0x1c, 0x00, 0x0c,
  0x38, 0x00, 0x18, 0x70, 0x00, 0x30, 0x7f, 0x00, 0x20, 0x06, 0x00, 0x7f, 0x8c, 0x00, 0xff, 0x98,
  0x00, 0x03, 0x30, 0x00, 0x06, 0x60, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00
};
const unsigned char myBitmapKw_1 [] PROGMEM = {
  0x01, 0xff, 0xc0, 0x03, 0x03, 0x80, 0x02, 0x07, 0x00, 0x06, 0x0e, 0x00, 0x04, 0x1c, 0x00, 0x0c,
  0x38, 0x00, 0x18, 0x70, 0x00, 0x30, 0x7f, 0x00, 0x20, 0x06, 0x00, 0x7f, 0x8c, 0x00, 0xff, 0x98,
  0x00, 0x03, 0x30, 0x00, 0x06, 0x60, 0x00, 0x04, 0xc0, 0x00, 0x0d, 0x80, 0x00, 0x1b, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x98, 0x00, 0x00, 0xf0, 0x00, 0x00
};

const unsigned char Wifi_Ok [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x0f, 0xf8, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0xff, 0xff, 0x80, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x07, 0xff, 0xff, 0xf0, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x0f, 0xf0, 0x07, 0xfc, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x3f, 0x80, 0x00, 0x7e, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0xfc, 0x00, 0x00, 0x1f, 0x80, 0x1f, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0xf0, 0x00, 0x00, 0x07, 0xc0, 0x0f, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xe0, 0x00, 0x00, 0x03, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xf8, 0x07, 0xc0, 0x0f, 0xf0, 0x00, 0xf0, 0x03, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xf8, 0x0f, 0x00, 0x7f, 0xff, 0x00, 0x78, 0x03, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x1e, 0x01, 0xff, 0xff, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x1e, 0x07, 0xf0, 0x0f, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0f, 0x80, 0x01, 0xf0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x3c, 0x00, 0x00, 0x3c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x78, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x0e, 0x70, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x1c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char epd_bitmap_Joint_30 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3d,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_29 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_28 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xf4, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0xe4, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc4, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc4, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc4, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc4, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xe4, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xf4, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_27 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc4, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x84, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_26 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_25 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xc4, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_24 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc4, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x88, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x8c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3e, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_23 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc4, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xf0, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x09, 0x80, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x09, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc9, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x81, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_22 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xe0, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xe0, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc8, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x88, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x84, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x84, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x82, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_21 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xc0, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xd0, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc8, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x88, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x84, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x84, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x82, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_20 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x80, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xcf, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xcf, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xcf, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcf, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xce, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xce, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcc, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcc, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcc, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcc, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_19 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xc2, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x86, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x44, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x42, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x42, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x42, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4f, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xff, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xfd, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf9, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf8, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf0, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf0, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf0, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf0, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf0, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf8, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_18 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7f, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x7f, 0x8e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x7f, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7f, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7f, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_17 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xe0, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xe0, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x40, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x40, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x40, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x40, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x60, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x60, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_16 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0xe0, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xff, 0xe0, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xfb, 0xe0, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xe3, 0xe0, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe3, 0xe0, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe7, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe7, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe7, 0xc0, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe7, 0xc0, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe7, 0xe0, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xe0, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xe0, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0xe0, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_15 [] PROGMEM = {
  0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xc0, 0x03, 0xe0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x60, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x30, 0x1c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x10, 0x1c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x20, 0x1c, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xf0, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0xf0, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfa, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf9, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_14 [] PROGMEM = {
  0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xc0, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x1c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x00, 0x1c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3c, 0x00, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x10, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0x80, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x80, 0x21, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x80, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x09, 0xfe, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x09, 0xbe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xbc, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x11, 0xb8, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x11, 0xb8, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x11, 0xbe, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x11, 0xbf, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xb9, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0xb8, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xb8, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xbc, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_13 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x18, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x08, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0x08, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x13, 0xc0, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x13, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xf8, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x9e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xc0, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xc0, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_12 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x13, 0xc0, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x13, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x13, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x13, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0xd3, 0xf8, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x9e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_11 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x98, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0xc8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x48, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x48, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0xc8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x06, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xc0, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x13, 0xf8, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x9e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_10 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x98, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x48, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x48, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0xc8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0x88, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x11, 0x88, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x11, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x11, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x09, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x09, 0xb8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x19, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x11, 0xb7, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x11, 0xb1, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x11, 0xb0, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x11, 0xb0, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x19, 0xb0, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x09, 0xb0, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x00, 0x09, 0xb0, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x00, 0x0d, 0xb0, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_9 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x88, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x88, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x88, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x88, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x99, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x19, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xf7, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xf1, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0xff, 0xf0, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x00, 0xff, 0xf0, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x01, 0xff, 0xf0, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_8 [] PROGMEM = {
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x19, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0d, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xfb, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf8, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0b, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0b, 0xf8, 0x07, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0b, 0xf8, 0x01, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0b, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x64, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x8c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_7 [] PROGMEM = {
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x29, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x06, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x11, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x09, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x1f, 0x8f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x1f, 0x83, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x3f, 0x80, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x3f, 0x80, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x7f, 0x80, 0x07, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x7f, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x02, 0x7f, 0x80, 0x00, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x70, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_6 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x06, 0x1c, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7c, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7c, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0xfc, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0xfc, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x03, 0xfc, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x03, 0xfc, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x3f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xcc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_5 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x1e, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x3f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xcc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_4 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x07, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xcc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x4c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_3 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x07, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_2 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x03, 0xfc,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x04, 0x90, 0x04,
  0x00, 0x07, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x04, 0x94, 0x14,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x04, 0x94, 0x14,
  0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0xf4, 0x94,
  0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x95, 0x74,
  0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x04, 0x96, 0x14,
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x90, 0x04,
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0xfc, 0x03, 0xfc,
  0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x46, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x26, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x26, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_Joint_1 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x7c, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00,
  0x00, 0x40, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x03, 0x80, 0x00, 0x01, 0xe0, 0x02, 0x01, 0xfe, 0x00,
  0x00, 0x40, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x70, 0x02, 0x48, 0x02, 0x00,
  0x03, 0xc0, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x18, 0x02, 0x4a, 0x0a, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x08, 0x02, 0x4a, 0x0a, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x02, 0x7a, 0x4a, 0x00,
  0x07, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x02, 0x4a, 0xba, 0x00,
  0x01, 0xe0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x02, 0x4b, 0x0a, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x48, 0x02, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xfe, 0x01, 0xfe, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
  0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x9f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1f, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//SD//
#include <SD.h>
#include <SPI.h>
#define chipSelect  53 // se cambií int por byte //
File HIDROWEED;

Sd2Card card;
SdVolume volume;
SdFile root;

//BLUETOOTH//
#include <SoftwareSerial.h>
SoftwareSerial BT_Weed(17, 16);  // RX, TX

//WIFI//
SoftwareSerial WiFi_ESP8266(19, 18);  // RX, TX

//////////////////////////////////////////////////////////////////

// SERVOS //
#include <Servo.h>

Servo servo_FLORA;
Servo servo_VEG;

#define OpturadorFLW 4
int anguloFLW;
#define OpturadorVEG 5
int anguloVEG;

int pulsoMIN = 900;
int pulsoMAX = 2100;

//////////////////////////////////////////////////////////////////

int semanas_Totales = 0;
int horas_Totales = 0;
int DiaNumero;
int DiasTotales;

int EtapaNro;
int Etapa_flw_nro = 0;
int Etapa_veg_nro = 0;
int Etapa_cln_nro = 0;
int Etapa_seca_nro = 0;

int Dia_flw_nro = 0;
int Dia_veg_nro = 0;
int Dia_cln_nro = 0;
int Dia_seca_nro = 0;

float Luz;
float Humedad;
float Temperatura;
float dpv;
float Co2;
float Sonda;
float Ec;
float Ph;
float TempSYST;
float AguaConsumida;
float Hydro_A;
float Hydro_B;
float Melesol;
float PhUp;
float PhDown;
float Kw;
float Kw_hrs;
float AlturaLuz;
float Extraccion;
float UV;
float Crecimiento;
float PotenciaLuz;
float EspacioLibre;

String Etapa;
String EdoWifi;
String EdoBT;

float file1SIZE1;
float file1SIZE2;
float file1SIZE3;
float file1SIZE4;
float file1SIZE5;
float file1SIZE6;
float file1SIZE7;
float file1SIZE8;
float file1SIZE9;
float file1SIZE10;
float file1SIZE11;
float file1SIZE12;
float file1SIZE13;
float file1SIZE14;
float file1SIZE15;
float file1SIZE17;
float file1SIZE18;
float file1SIZE19;

float totalSIZES;
float totalSIZE;

float lts_ACU_FLW=0;
float lts_ACU_VEG=0;
float lts_ACU_CLN=0;

File Lts_FLW;
File Lts_VEG;
File Lts_CLN;

///////////////////////////////////////////////////////////////

// TIEMPOS DE ACTIVACIÓN RELES ///

bool edo_bomba_AguaLimpia = 0;
unsigned long tI_bomba_AguaLimpia;
unsigned long tF_bomba_AguaLimpia;
unsigned long tT_bomba_AguaLimpia;

float Mlt_X_Min = 60.0;
float Lts_X_Hrs = 600.0;

float Sol_AB_VEG = 9.0;

float Sol_C_VEG_SEM_1 = 8.0;
float Sol_C_VEG_SEM_2 = 7.0;
float Sol_C_VEG_SEM_3 = 5.0;

float Sol_AB_FLW_SEM1 = 13.0;
float Sol_AB_FLW_SEM2 = 16.0;
float Sol_AB_FLW_SEM3_6 = 18.0;
float Sol_AB_FLW_SEM7 = 13.0;

float Sol_C_FLW_SEM6 = 4.0;
float Sol_C_FLW_SEM7 = 7.0;
float Sol_C_FLW_SEM8 = 10.0;

///////////////////////////////////////////
// CONTROL DE MOTORES 12V //

// POTENCIOMETRO + MOTOR 12V //
#define motor_FLW    6   //  PIN DEL MOSFET MOTOR FLW   //
#define pot_FLW      A13  //  PIN DEL POTENCIÓMETRO FLW  //
#define motor_VEG    2   //  PIN DEL MOSFET MOTOR VEG   //
#define pot_VEG      A9 //  PIN DEL POTENCIÓMETRO VEG  //
#define  motor_SEC   3   //  PIN DEL MOSFET MOTOR VEG   //

//////////////////////////////////////////////////////////////////

#include <NewPing.h>

// IZQUIERDA FLORACIÓN //
#define TRIGGER_sensor_1  27
#define ECHO_sensor_1     26

// DERECHA FLORACIÓN //
#define TRIGGER_sensor_2  23
#define ECHO_sensor_2     25

// IZQUIERDA VEGETACIÓN //
#define TRIGGER_sensor_3  33
#define ECHO_sensor_3     30

// DERECHA VEGETACIÓN //
#define TRIGGER_sensor_4   29
#define ECHO_sensor_4      31

#define MAX_DISTANCE 200

float Distancia_media;
float Dist_ant_flw;
float Dist_act_flw;
float Dist_ant_veg;
float Dist_act_veg;

NewPing sensor_1(TRIGGER_sensor_1, ECHO_sensor_1, MAX_DISTANCE);
NewPing sensor_2(TRIGGER_sensor_2, ECHO_sensor_2, MAX_DISTANCE);
NewPing sensor_3(TRIGGER_sensor_3, ECHO_sensor_3, MAX_DISTANCE);
NewPing sensor_4(TRIGGER_sensor_4, ECHO_sensor_4, MAX_DISTANCE);

//////////////////////////////////////////////////////////////////

// Bomba agua limpia    //
#define nivel_Agua  39             // flotador Agua Limpia //
#define bomba_AguaLimpia 36      // Bomba Agua Limpia    //
#define Vent_Extraccion 12         // bomba de Extraccion  //

// Relevadores CLN      //
#define nivel_CLN  41              // flotador agua limpia //
#define Circula_CLN 37             // Circulación 24 Hrs.  //

// Relevadores FLW      //
#define nivel_FLW   49              // Nivel floración      //
#define Luz_FLW   40                // Luz de floración     //
#define Circula_FLW  42             // Bomba DW FLW         //

// Relevadores VEG      //
#define nivel_VEG   43              // Nivel Vegetación      //
#define Luz_VEG   44                // Luz de Vegetación     //
#define Circula_VEG  38            // Bomba DW VEG         //

static int hydro_A_FLW = 0;
static int hydro_B_FLW = 1;
static int hydro_C_FLW = 2;
static int hydro_UP_FLW = 3;
static int hydro_DW_FLW = 4;
static int hydro_A_VEG = 5;
static int hydro_B_VEG = 6;
static int hydro_C_VEG = 7;

static int hydro_UP_VEG = 0;
static int hydro_DW_VEG = 1;
static int electrovalvula_CLN = 2;
static int electrovalvula_FLW = 3;
static int electrovalvula_VEG = 4;
static int humidificador_CLN = 5;
static int oxigeno = 6;
static int Mixer = 7;

#include "Arduino.h"
#include "PCF8574.h" 

PCF8574 pcf8574_1(0x38);
PCF8574 pcf8574_2(0x39);

// Ciclos //
#define pausa  5
unsigned long previousMillis_FLW = 0;
unsigned long previousMillis_VEG = 0;
unsigned long previousMillis_CLN = 0;
unsigned long previousMillis_DRY = 0;
unsigned long intervaloPPAL = 600000;

byte Oxigenador = LOW;
unsigned long previousMillis_O2 = 0;
#define O2_On  600000

String cadenaLts_FLW = "";
String cadenaLts_VEG = "";
String cadenaLts_CLN = "";
float Lts_Totales;
float Lts_FLW_Totales;
float Lts_VEG_Totales;
float Lts_CLN_Totales;
float Total_Acumulado_Agua;

int tope_AGUA_FLW = 100;
int tope_AGUA_VEG = 100;
int tope_AGUA_CLN = 50;

File HRS;
File KWHRS;

unsigned long millisprev_Chora = 0;
unsigned long cadaHora = (1000 * 60) * 60;
String cadena = "";
String cadenaKWHRS = "";
int contador = 0;
int hora_actual = 0;

float Sd_KWHRS = 0.0;
float costoKW;
int Watts_MAX_diarios = 0;
float Escala_costo = 100000;

float costo_TOTAL;
unsigned long Seg;
unsigned long mins;
int Hor;
int Dias;
int Week;

//Reloj//
#include "RTClib.h"
RTC_DS3231 rtc;
int DIAS_ALARMA = 0;

String dato_DiaSemana, dato_MesAnio, dato_SD;
String Dias_Semana[7] = { "Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado" };
String Nombres_Meses[12] = { "Dic", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov" };
String dato_Fecha, dato_Hora, dato_Etapa, dato_Luz, dato_Humedad, dato_Temperatura, dato_dpv, dato_Co2, dato_Sonda, dato_Ec, dato_Ph, dato_DiaNumero, dato_DiasTotales, dato_TempSYST, dato_AguaConsumida, dato_A, dato_B, dato_C, dato_PhUp, dato_PhDown, dato_Kw, dato_AlturaLuz, dato_Extraccion, dato_UV, dato_Crecimiento, dato_PotenciaLuz, dato_EtapaNro, dato_EspacioLibre, dato_EdoWifi, dato_EdoBT;

//CORRIENTE + SCT013_50A///

#include "EmonLib.h" 
EnergyMonitor emon1;

#define SCT_013_50A  A3
float corriente;
float Potencia;
float Voltaje_Col = 129.0;
float Kw_Acumulado= 0;
float valor_Kw_Hrs = 0;
unsigned long contador_Kw_1 = 0;

//Co2//
#include "MQ135.h"

//Co2_FLW//
#define Co2_F  A14 
#define RZERO1 206.85
MQ135 gasSensor1 = MQ135(Co2_F);

//Co2_VEG//
#define Co2_V  A10
#define RZERO2 206.85
MQ135 gasSensor2 = MQ135(Co2_V);

//Co2_CLN//
#define Co2_C  A1
#define RZERO2 206.85
MQ135 gasSensor3 = MQ135(Co2_C);

//Co2_DRY//
#define Co2_D  A2
#define RZERO2 206.85
MQ135 gasSensor4 = MQ135(Co2_D);

//SONDAS DSB//
#include <OneWire.h>
#include <DallasTemperature.h>

//SONDA TEMPERATURA VEG//
#define pinDatosDQ1  45
OneWire oneWireObjeto_1(pinDatosDQ1);
DallasTemperature sensorDS18B20_1(&oneWireObjeto_1);

//SONDA TEMPERATURA FLORA//
#define pinDatosDQ2  47
OneWire oneWireObjeto_2(pinDatosDQ2);
DallasTemperature sensorDS18B20_2(&oneWireObjeto_2);

//SONDA TEMPERATURA CLON//
#define pinDatosDQ3  48
OneWire oneWireObjeto_3(pinDatosDQ3);
DallasTemperature sensorDS18B20_3(&oneWireObjeto_3);

//////////////////////////////////////////////////////////////////

//TEMPERATURA SYSTEM//
#define pinDatosDQ4  15
OneWire oneWireObjeto_4(pinDatosDQ4);
DallasTemperature sensorDS18B20_4(&oneWireObjeto_4);
float Temp_SYST_DSB ;
//////////////////////////////////////////////////////////////////

// Luxómetros //
#include <MAX44009.h>
#include "BH1750.h"

MAX44009 light1;
BH1750 light2;
BH1750 light3;

//////////////////////////////////////////////////////////////////

// UV //
#include <Arduino.h>
#include <ML8511.h>

#define ANALOG_uv_flw A12
#define ENABLEPIN_uv_flw A11
float    suma1   = 0;
uint32_t cuenta1 = 0;
ML8511 UvFLW(ANALOG_uv_flw, ENABLEPIN_uv_flw);

#define ANALOG_uv_veg A15
#define ENABLEPIN_uv_veg A7
float    suma2   = 0;
uint32_t cuenta2 = 0;
ML8511 UvVEG(ANALOG_uv_veg, ENABLEPIN_uv_veg);

//////////////////////////////////////////////////////////////////

// Temperatura y Humedad//
#include "DHT.h"
#define DHTTYPE DHT11

// Temperatura y Humedad FLORACIÓN //
#define DHTPIN_FLORA 24
DHT dht_FLORA(DHTPIN_FLORA, DHTTYPE);
float pres_vap_sat_FLORA;
float def_pres_vap_FLORA;

// Temperatura y Humedad VEGETACIÓN //
#define DHTPIN_VEG 28
DHT dht_VEG(DHTPIN_VEG, DHTTYPE);
float pres_vap_sat_VEG;
float def_pres_vap_VEG;

// Temperatura y Humedad CLONADOR //
#define DHTPIN_CLON 46
DHT dht_CLON(DHTPIN_CLON, DHTTYPE);
float pres_vap_sat_CLN;
float def_pres_vap_CLN;

// Temperatura y Humedad SECADO //
#define DHTPIN_SEC 22
DHT dht_SEC(DHTPIN_SEC, DHTTYPE);
float pres_vap_sat_SEC;
float def_pres_vap_SEC;

////////////////////////////////////////////////////

// INTERRUPTORES + LEDS 5V //
#define pulsadorPPAL_FLW  11
bool ledStateFLW = 0;
bool buttonStateFLW = 0;
int incremento = 1;
int limite = 9990;
int contFLW = -1 * incremento;
bool estPulFLWActual = 1;
bool estPulFLWAnterior = 1;
#define led5v_FLW  14

#define pulsadorPPAL_VEG  10
bool ledStateVEG = 0;
bool buttonStateVEG = 0;
int contVEG = -1 * incremento;
bool estPulVEGActual = 1;
bool estPulVEGAnterior = 1;
#define led5v_VEG  0

const int pulsadorPPAL_CLN = 9;
bool ledStateCLN = 0;
bool buttonStateCLN = 0;
int contCLN = -1 * incremento;
bool estPulCLNActual = 1;
bool estPulCLNAnterior = 1;
#define led5v_CLN  1

const int pulsadorPPAL_DRY = 8;
bool ledStateDRY = 0;
bool buttonStateDRY = 0;
int contDRY = -1 * incremento;
bool estPulDRYActual = 1;
bool estPulDRYAnterior = 1;
#define led5v_DRY  7
////////////////////////////////////////////////////

// CONTADORES Y ETAPAS //

// FLORACIÓN //

File ETANROFLW;
File edoETAPAFLW;
File HRSFLW;

int cont_hrs_FLW = 0;

String cadena_HRSFLW = "";
int hora_actualFLW;

String cadena_EDO_FLW = "";
bool edo_ETAPAFLW;

String cadena_ETANROFLW = "";
int valor_ETANROFLW;

unsigned long millisprev_ChoraFLW ;
unsigned long cadaHora_flw = (1000 * 60) * 60 ;

// VEGETACIÓN //

File ETANROVEG;
File edoETAPAVEG;
File HRSVEG;

int cont_hrs_VEG = 0;

String cadena_HRSVEG = "";
int hora_actualVEG;

String cadena_EDO_VEG = "";
bool edo_ETAPAVEG;

String cadena_ETANROVEG = "";
int valor_ETANROVEG;

unsigned long millisprev_ChoraVEG ;
unsigned long cadaHora_VEG = (1000 * 60) * 60 ;

// CLONADOR //

File ETANROCLN;
File edoETAPACLN;
File HRSCLN;

int cont_hrs_CLN = 0;

String cadena_HRSCLN = "";
int hora_actualCLN;

String cadena_EDO_CLN = "";
bool edo_ETAPACLN;

String cadena_ETANROCLN = "";
int valor_ETANROCLN;

unsigned long millisprev_ChoraCLN ;
unsigned long cadaHora_CLN = (1000 * 60) * 60 ;

// SECADO //

File ETANRODRY;
File edoETAPADRY;
File HRSDRY;

int cont_hrs_DRY = 0;

String cadena_HRSDRY = "";
int hora_actualDRY;

String cadena_EDO_DRY = "";
bool edo_ETAPADRY;

String cadena_ETANRODRY = "";
int valor_ETANRODRY;

unsigned long millisprev_ChoraDRY ;
unsigned long cadaHora_DRY = (1000 * 60) * 60 ;

// PH_METRO FLW & VEG //
float calibration_value = 21.34;
#define PhSensorPin_F A4
#define PhSensorPin_V A7

// FLW //
int phval1 = 0;
unsigned long int avgval1;
int buffer_arr_F[10], temp1;

// VEG //
int phval2 = 0;
unsigned long int avgval2;
int buffer_arr_V[10], temp2;

#define TdsSensorPin_F A6
#define VREF 5.0      // analog reference voltage(Volt) of the ADC
#define SCOUNT_F  30           // sum of sample point

int analogBuffer_F[SCOUNT_F];    // store the analog value in the array, read from ADC
int analogBuffer_FTemp[SCOUNT_F];
int analogBuffer_FIndex = 0, copyIndex_F = 0;
float averageVoltage_F = 0, tdsValue_F = 0, Temp_F = 25;

#define TdsSensorPin_V A5
#define VREF 5.0      // analog reference voltage(Volt) of the ADC
#define SCOUNT_V  30           // sum of sample point

int analogBuffer_V[SCOUNT_V];    // store the analog value in the array, read from ADC
int analogBuffer_VTemp[SCOUNT_V];
int analogBuffer_VIndex = 0, copyIndex_V = 0;
float averageVoltage_V = 0, tdsValue_V = 0, Temp_V = 25;

int counter_Ph_F = 0;             // counter_Ph_F used to set the LED
unsigned long T_prev_Ph_F = 0;        // will store last time LED was updated
const long lectura_Ph = 16200;           // lectura_Ph at which to blink (milliseconds)
float Ph_medi_F = 0.0;
#define veces  10
int counter_Ph_V = 0;             // counter_Ph_V used to set the LED
unsigned long T_prev_Ph_V = 0;        // will store last time LED was updated
float Ph_medi_V = 0.0;


void setup() {

  // I2C ON //
  Wire.begin();
  
 emon1.current(SCT_013_50A, 119.9);
 
  Serial.begin(115200);
  while (!Serial) {
    ;
  }

  WiFi_ESP8266.begin(115200);
  BT_Weed.begin(38400);
  Serial3.begin(9600);

  // PANTALLAS PANEL //

  if (u8g.getMode() == U8G_MODE_R3G3B2) {
    u8g.setColorIndex(255);  // white
  } else if (u8g.getMode() == U8G_MODE_GRAY2BIT) {
    u8g.setColorIndex(3);  // max intensity
  } else if (u8g.getMode() == U8G_MODE_BW) {
    u8g.setColorIndex(1);  // pixel on
  } else if (u8g.getMode() == U8G_MODE_HICOLOR) {
    u8g.setHiColorByRGB(255, 255, 255);
  }
  u8g.setFont(u8g_font_tpssb);

  // PANTALLA1 //
  display1.begin(SH1106_SWITCHCAPVCC, i2c_Address);
  display1.display();
  delay(pausa);
  display1.clearDisplay();

  delay(pausa);
  display1.clearDisplay();
  display1.setTextSize(2);
  display1.setTextColor(WHITE);
  display1.setCursor(12, 16);
  display1.println("HidroWeed");
  display1.setTextSize(1);
  display1.setTextColor(WHITE);
  display1.setCursor(21, 40);
  display1.println("Hidroponia IoT");
  display1.display();
  delay(pausa);
  display1.clearDisplay();

  // PANTALLA2 //
  display2.begin(SH1106_SWITCHCAPVCC, 0x3D);
  display2.display();
  delay(pausa);
  display2.clearDisplay();

  // LUZ //
  light1.begin();
  light2.begin(BH1750::CONTINUOUS_HIGH_RES_MODE, 0x23, &Wire);
  light3.begin(BH1750::CONTINUOUS_HIGH_RES_MODE, 0x5C, &Wire);

  // RELOJ//
  if (!rtc.begin()) {
    Serial.println(F("Reloj Desconectado."));
  }
  DateTime now = rtc.now();

  if (rtc.lostPower()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  //HUM Y TEMP FLORA//
  dht_FLORA.begin();

  //HUM Y TEMP VEG//
  dht_VEG.begin();

  //HUM Y TEMP CLONADOR//
  dht_CLON.begin();

  //HUM Y TEMP SECADO//
  dht_SEC.begin();

  // SONDA//
  sensorDS18B20_1.begin();
  sensorDS18B20_2.begin();
  sensorDS18B20_3.begin();
  sensorDS18B20_4.begin();

  // UV //
  UvFLW.enable();
  UvVEG.enable();

  pinMode(nivel_Agua,INPUT);                 // Flotador GRAL //
  pinMode(nivel_CLN, INPUT);                  // Flotador CLN  //
  pinMode(nivel_FLW, INPUT);                  // Flotador FLW  //
  pinMode(nivel_VEG, INPUT);                  // Flotador VEG  //

  pinMode(bomba_AguaLimpia, OUTPUT);          // Bomba Agua Limpia            //
  pinMode(Vent_Extraccion, OUTPUT);           // Ventiladores de Extraccion   //
  pinMode(Circula_CLN, OUTPUT);               // Relé 24 Horas CLN  //
  pinMode(Luz_FLW, OUTPUT);                   // Luz FLW               //
  pinMode(Circula_FLW, OUTPUT);               // Relé 24 Horas FLW     //
  pinMode(Luz_VEG, OUTPUT);                    // Luz VEG               //
  pinMode(Circula_VEG, OUTPUT);                // Relé 24 Horas VEG     //

  pcf8574_1.pinMode(hydro_A_FLW, OUTPUT);               // Hydro A FLW           //
  pcf8574_1.pinMode(hydro_B_FLW, OUTPUT);               // Hydro B FLW           //
  pcf8574_1.pinMode(hydro_C_FLW, OUTPUT);               // Hydro C FLW           //
  pcf8574_1.pinMode(hydro_UP_FLW, OUTPUT);              // PhUp FLW              //
  pcf8574_1.pinMode(hydro_DW_FLW, OUTPUT);              // PhDw FLW              //
  pcf8574_1.pinMode(hydro_A_VEG, OUTPUT);                // Hydro A VEG           //
  pcf8574_1.pinMode(hydro_B_VEG, OUTPUT);                // Hydro B VEG           //
  pcf8574_1.pinMode(hydro_C_VEG, OUTPUT);                // Hydro C VEG           //  
  
  pcf8574_2.pinMode(oxigeno, OUTPUT);                   // Bomba de oxigenacion         //
  pcf8574_2.pinMode(electrovalvula_CLN, OUTPUT);        // Electroválvula CLN //
  pcf8574_2.pinMode(humidificador_CLN, OUTPUT);         // humidificador CLN  //
  pcf8574_2.pinMode(electrovalvula_FLW, OUTPUT);        // electrovalvula FLW    //
  pcf8574_2.pinMode(Mixer, OUTPUT);                     // MEZCLADOR             //
  pcf8574_2.pinMode(electrovalvula_VEG, OUTPUT);         // electrovalvula VEG    //
  pcf8574_2.pinMode(hydro_UP_VEG, OUTPUT);               // PhUp VEG              //
  pcf8574_2.pinMode(hydro_DW_VEG, OUTPUT);               // PhDw VEG              //
 
 
  digitalWrite(Luz_FLW, LOW);                  // Luz FLW               //
  pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);       // electrovalvula FLW    //
  pcf8574_1.digitalWrite(hydro_A_FLW, LOW);              // Hydro A FLW           //
  pcf8574_1.digitalWrite(hydro_B_FLW, LOW);              // Hydro B FLW           //
  pcf8574_1.digitalWrite(hydro_C_FLW, LOW);              // Hydro C FLW           //
  pcf8574_1.digitalWrite(hydro_UP_FLW, LOW);             // PhUp FLW              //
  pcf8574_1.digitalWrite(hydro_DW_FLW, LOW);             // PhDw FLW              //
  digitalWrite(Circula_FLW, LOW);              // Relé 24 Horas FLW     //
  pcf8574_2.digitalWrite(Mixer, LOW);                    // MEZCLADOR             //
  digitalWrite(Luz_VEG, LOW);                   // Luz VEG               //
  pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);        // electrovalvula VEG    //
  pcf8574_1.digitalWrite(hydro_A_VEG, LOW);               // Hydro A VEG           //
  pcf8574_1.digitalWrite(hydro_B_VEG, LOW);               // Hydro B VEG           //
  pcf8574_1.digitalWrite(hydro_C_VEG, LOW);               // Hydro C VEG           //
  pcf8574_2.digitalWrite(hydro_UP_VEG, LOW);              // PhUp VEG              //
  pcf8574_2.digitalWrite(hydro_DW_VEG, LOW);              // PhDw VEG              //
  digitalWrite(Circula_VEG, LOW);               // Relé 24 Horas VEG     //
  digitalWrite(bomba_AguaLimpia, LOW);        // Arranca bomba de agua ppal apagada  //
  pcf8574_2.digitalWrite(oxigeno, LOW);                 // Ventiladores de Extraccion APAGADOS //
  digitalWrite(Vent_Extraccion, LOW);         // Ventiladores de Extraccion APAGADOS //
  digitalWrite(Circula_CLN, LOW);             // Relé 24 Horas CLN APAGADO  //
  pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);      // electrovalvula CLN CERRADA //
  pcf8574_2.digitalWrite(humidificador_CLN, LOW);       // humidificador CLN APAGADO  //

  digitalWrite(nivel_Agua, HIGH);             // Flotador GRAL //
  digitalWrite(nivel_CLN, HIGH);              // Flotador CLN //
  digitalWrite(nivel_FLW, HIGH);              // Flotador FLW //
  digitalWrite(nivel_VEG, HIGH);              // Flotador VEG //

  //Co2_FLW//
  float rzero1 = gasSensor1.getRZero();

  //CO2_VEG//
  float rzero2 = gasSensor2.getRZero();

  //CO2_CLN//
  float rzero3 = gasSensor3.getRZero();

  //CO2_DRY//
  float rzero4 = gasSensor4.getRZero();

  //SD//
  pinMode(chipSelect, OUTPUT);
  card.init(SPI_HALF_SPEED, chipSelect);
  SD.begin(chipSelect);

  //Guardar Datos de Titulo//
  String dataString_SD = "";
  dataString_SD += String("dato_Fecha, dato_Hora, dato_Etapa, dato_Luz, dato_Humedad, dato_Temperatura, dato_dpv, dato_Co2, dato_Sonda, dato_Ec, dato_Ph, dato_DiaNumero, dato_DiasTotales, dato_TempSYST, dato_AguaConsumida, dato_A, dato_B, dato_C, dato_PhUp, dato_PhDown, dato_Kw, dato_AlturaLuz, dato_Extraccion, dato_UV, dato_Crecimiento, dato_PotenciaLuz, dato_EtapaNro, dato_EspacioLibre, dato_EdoWifi, dato_EdoBT");

  File HIDROWEED = SD.open("HIDROWEED.txt", FILE_WRITE);
  if (HIDROWEED)
  {
    file1SIZE1 = HIDROWEED.size();
    if (file1SIZE1 == 0)
    {
      HIDROWEED.println(dataString_SD);
      HIDROWEED.close();
      String dataString_SD = "";
    }
    else
    {
      File HIDROWEED = SD.open("HIDROWEED.txt", FILE_WRITE);
      HIDROWEED.close();
      String dataString_SD = "";
    }
  }
  else
  {
    //Serial.println("error al abrir HIDROWEED.txt");
    String dataString_SD = "";
  }

  dato_Fecha = String();
  dato_Hora = String();
  dato_Etapa = String();
  dato_Luz = String();
  dato_Humedad = String();
  dato_Temperatura = String();
  dato_dpv = String();
  dato_Co2 = String();
  dato_Sonda = String();
  dato_Ec = String();
  dato_Ph = String();
  dato_DiaNumero = String();
  dato_DiasTotales = String();
  dato_TempSYST = String();
  dato_AguaConsumida = String();
  dato_A = String();
  dato_B = String();
  dato_C = String();
  dato_PhUp = String();
  dato_PhDown = String();
  dato_Kw = String();
  dato_AlturaLuz = String();
  dato_Extraccion = String();
  dato_UV = String();
  dato_Crecimiento = String();
  dato_PotenciaLuz = String();
  dato_EtapaNro = String();
  dato_EspacioLibre = String();
  dato_EdoWifi = String();
  dato_EdoBT = String();

  pinMode(motor_FLW, OUTPUT); //MOTOR FLORA - MOSFET PWM//
  pinMode(motor_VEG, OUTPUT); //MOTOR VEG - MOSFET PWM//
  pinMode(motor_SEC, OUTPUT); //MOTOR VEG - MOSFET PWM//

  // INTERRUPTORES + LEDS 5V //

  pinMode(led5v_FLW, OUTPUT); // Led 5v FLW //
  pinMode(led5v_VEG, OUTPUT); // Led 5v VEG //
  pinMode(led5v_CLN, OUTPUT); // Led 5v CLN //
  pinMode(led5v_DRY, OUTPUT); // Led 5v DRY //

  pinMode(pulsadorPPAL_FLW, INPUT);
  pinMode(pulsadorPPAL_VEG, INPUT);
  pinMode(pulsadorPPAL_CLN, INPUT);
  pinMode(pulsadorPPAL_DRY, INPUT);

  ////////////////////////////////////////////////////////

  // SERVOS //

  servo_FLORA.attach(OpturadorFLW, pulsoMIN, pulsoMAX);
  servo_VEG.attach(OpturadorVEG, pulsoMIN, pulsoMAX);


  pinMode(PhSensorPin_F, INPUT);
  pinMode(PhSensorPin_V, INPUT);
  pinMode(TdsSensorPin_F, INPUT);
  pinMode(TdsSensorPin_V, INPUT);

  // REVISAR CONTADORES //

  Act_SEM_FLW();              delay(pausa);

  actualizar_HRS_ppal();      delay(pausa);
  Revisar_Contadores_FLW ();  delay(pausa);
  Revisar_Contadores_VEG ();  delay(pausa);
  Revisar_Contadores_CLN ();  delay(pausa);
  Revisar_Contadores_DRY ();  delay(pausa);
  Comprobar_Kw_Acumulado();   delay(pausa);
  Logo_HidroWeed_OLED();      delay(pausa);

}

void loop() {

  SWTCH_FLORACION();
  SWTCH_VEGETACION();
  SWTCH_CLONADOR();
  SWTCH_SECADO();

  All_Off ();
  All_On ();

}


void All_On () {

  if (ledStateFLW == 1 || ledStateVEG == 1 || ledStateCLN == 1 || ledStateDRY == 1)
  {
    Tablero_PPAL();
  }

}

void All_Off () {
  if (ledStateFLW == 0 && ledStateVEG == 0 && ledStateCLN == 0 && ledStateDRY == 0)
  {
    DateTime now = rtc.now();
    KiloWatts_Costo();

    //Reloj_Cada_Segundo(now);
    Joint_420_HD();
    Logo_HidroWeed_OLED();
    Cannabis_HOJA();

    digitalWrite(nivel_Agua, LOW);               // Flotador GRAL                             //
    digitalWrite(bomba_AguaLimpia, LOW);         // Arranca bomba de agua ppal apagada        //
    pcf8574_2.digitalWrite(oxigeno, LOW);                  // Ventiladores de Extraccion APAGADOS       //
    digitalWrite(Vent_Extraccion, LOW);          // Ventiladores de Extraccion APAGADOS       //
    pcf8574_2.digitalWrite(Mixer, LOW);                    // MEZCLADOR                                 //

  }

  if (ledStateFLW == 0)
  {

    digitalWrite(Luz_FLW, LOW);                  // Luz FLW                                   //
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);       // electrovalvula FLW                        //
    pcf8574_1.digitalWrite(hydro_A_FLW, LOW);              // Hydro A FLW                               //
    pcf8574_1.digitalWrite(hydro_B_FLW, LOW);              // Hydro B FLW                               //
    pcf8574_1.digitalWrite(hydro_C_FLW, LOW);              // Hydro C FLW                               //
    pcf8574_1.digitalWrite(hydro_UP_FLW, LOW);             // PhUp FLW                                  //
    pcf8574_1.digitalWrite(hydro_DW_FLW, LOW);             // PhDw FLW                                  //
    digitalWrite(Circula_FLW, LOW);              // Relé 24 Horas FLW                         //
    digitalWrite(nivel_FLW, LOW);                // Flotador FLW                              //
    analogWrite(motor_FLW, 0);                   // MOTOR ALTURA FLW                          //
    digitalWrite(led5v_FLW, LOW);                // Led 5v FLW                                //

  }

  if (ledStateVEG == 0)
  {

    digitalWrite(Luz_VEG, LOW);                   // Luz VEG               //
    pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);        // electrovalvula VEG    //
    pcf8574_1.digitalWrite(hydro_A_VEG, LOW);               // Hydro A VEG           //
    pcf8574_1.digitalWrite(hydro_B_VEG, LOW);               // Hydro B VEG           //
    pcf8574_1.digitalWrite(hydro_C_VEG, LOW);               // Hydro C VEG           //
    pcf8574_2.digitalWrite(hydro_UP_VEG, LOW);              // PhUp VEG              //
    pcf8574_2.digitalWrite(hydro_DW_VEG, LOW);              // PhDw VEG              //
    digitalWrite(Circula_VEG, LOW);               // Relé 24 Horas VEG     //
    digitalWrite(nivel_VEG, LOW);                 // Flotador VEG          //
    analogWrite(motor_VEG, 0);                    // MOTOR ALTURA VEG      //
    digitalWrite(led5v_VEG, LOW);                 // Led 5v VEG            //

  }

  if (ledStateCLN == 0)
  {

    digitalWrite(nivel_CLN, LOW);                // Flotador FLW               //
    digitalWrite(Circula_CLN, LOW);              // Relé 24 Horas CLN APAGADO  //
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);       // electrovalvula CLN CERRADA //
    pcf8574_2.digitalWrite(humidificador_CLN, LOW);        // humidificador CLN APAGADO  //
    digitalWrite(led5v_CLN, LOW);                // Led 5v CLN                 //

  }

  if (ledStateDRY == 0)
  {

    analogWrite(motor_SEC, 0);        // EXTRACCIÓN SECADO //
    digitalWrite(led5v_DRY, LOW);     // Led 5v DRY        //

  }

}

//ESTADOS SWITCHES + LEDS //
void SWTCH_FLORACION () {

  estPulFLWActual = digitalRead(buttonStateFLW);
  if ((estPulFLWAnterior == 1 && estPulFLWActual == 0) || contFLW == -1 * incremento) {
    contFLW = contFLW + incremento; // suma 1 al valor de la variable contFLWador
    if (contFLW > limite) { // si el contFLWador supera el limite
      contFLW = 0; // devuelve el contFLWador a 0
    }
    /*Serial.print("contFLW : ");
      Serial.println(contFLW);
      Serial.print("Actual : ");
      Serial.println(estPulFLWActual);
      Serial.print("Anterior : ");
      Serial.println(estPulFLWAnterior);*/
  }
  delay(1000);
  estPulFLWAnterior = estPulFLWActual;
  buttonStateFLW = digitalRead(pulsadorPPAL_FLW);

  if (buttonStateFLW == HIGH) {
    if (ledStateFLW == 0) {
      ledStateFLW = 1;
    } else {
      ledStateFLW = 0;
      contFLW --;
    }
    delay(250);
  } else {
    delay(250);
  }

  if (ledStateFLW == 0) {
    digitalWrite(led5v_FLW, LOW);
    Serial.println (ledStateFLW);

  }

  if (ledStateFLW == 1) {
    digitalWrite(led5v_FLW, HIGH);
    Serial.println (ledStateFLW);

    unsigned long currentMillis_FLW = millis();
    if (currentMillis_FLW - previousMillis_FLW >= intervaloPPAL)

    { // EJECUCIÓN CADA 5MIN //

      previousMillis_FLW = currentMillis_FLW;
      FLORACION();

    }
  }
}
void SWTCH_VEGETACION () {

  estPulVEGActual = digitalRead(buttonStateVEG);
  if ((estPulVEGAnterior == 1 && estPulVEGActual == 0) || contVEG == -1 * incremento) {
    contVEG = contVEG + incremento;
    if (contVEG > limite) {
      contVEG = 0;
    }
    /*Serial.print("contVEG : ");
      Serial.println(contVEG);
      Serial.print("Actual : ");
      Serial.println(estPulVEGActual);
      Serial.print("Anterior : ");
      Serial.println(estPulVEGAnterior);*/
  }
  delay(20);
  estPulVEGAnterior = estPulVEGActual;
  buttonStateVEG = digitalRead(pulsadorPPAL_VEG);
  if (buttonStateVEG == HIGH) {
    if (ledStateVEG == 0) {
      ledStateVEG = 1;
    } else {
      ledStateVEG = 0;
      contVEG --;
    }
    delay(250);
  } else {
    delay(250);
  }

  if (ledStateVEG == 0) {
    digitalWrite(led5v_VEG, LOW);
    Serial.println (ledStateVEG);

  }

  if (ledStateVEG == 1) {
    digitalWrite(led5v_VEG, HIGH);
    Serial.println (ledStateVEG);

    unsigned long currentMillis_VEG = millis();
    if (currentMillis_VEG - previousMillis_VEG >= intervaloPPAL)

    { // EJECUCIÓN CADA 5MIN //

      previousMillis_VEG = currentMillis_VEG;
      VEGETACION();

    }
  }
}
void SWTCH_CLONADOR () {

  estPulCLNActual = digitalRead(buttonStateCLN);
  if ((estPulCLNAnterior == 1 && estPulCLNActual == 0) || contCLN == -1 * incremento) {
    contCLN = contCLN + incremento;
    if (contCLN > limite) {
      contCLN = 0;
    }
    /*Serial.print("contCLN : ");
      Serial.println(contCLN);
      Serial.print("Actual : ");
      Serial.println(estPulCLNActual);
      Serial.print("Anterior : ");
      Serial.println(estPulCLNAnterior);*/
  }
  delay(20);
  estPulCLNAnterior = estPulCLNActual;
  buttonStateCLN = digitalRead(pulsadorPPAL_CLN);
  if (buttonStateCLN == HIGH) {
    if (ledStateCLN == 0) {
      ledStateCLN = 1;
    } else {
      ledStateCLN = 0;
      contCLN --;
    }
    delay(250);
  } else {
    delay(250);
  }

  if (ledStateCLN == 0) {
    digitalWrite(led5v_CLN, LOW);
    Serial.println (ledStateCLN);

  }

  if (ledStateCLN == 1) {

    digitalWrite(led5v_VEG, HIGH);
    //Serial.println (ledStateCLN);

    unsigned long currentMillis_CLN = millis();
    if (currentMillis_CLN - previousMillis_CLN >= intervaloPPAL)

    { // EJECUCIÓN CADA 5MIN //

      previousMillis_CLN = currentMillis_CLN;
      CLONADOR();

    }
  }
}
void SWTCH_SECADO () {

  estPulDRYActual = digitalRead(buttonStateDRY);
  if ((estPulDRYAnterior == 1 && estPulDRYActual == 0) || contDRY == -1 * incremento) {
    contDRY = contDRY + incremento;
    if (contDRY > limite) {
      contDRY = 0;
    }
    /*Serial.print("contDRY : ");
      Serial.println(contDRY);
      Serial.print("Actual : ");
      Serial.println(estPulDRYActual);
      Serial.print("Anterior : ");
      Serial.println(estPulDRYAnterior);*/
  }
  delay(20);
  estPulDRYAnterior = estPulDRYActual;
  buttonStateDRY = digitalRead(pulsadorPPAL_DRY);
  if (buttonStateDRY == HIGH) {
    if (ledStateDRY == 0) {
      ledStateDRY = 1;
    } else {
      ledStateDRY = 0;
      contDRY --;
    }
    delay(250);
  } else {
    delay(250);
  }

  if (ledStateDRY == 0) {
    digitalWrite(led5v_DRY, LOW);
    Serial.println (ledStateDRY);

  }

  if (ledStateDRY == 1) {
    digitalWrite(led5v_DRY, HIGH);
    Serial.println (ledStateDRY);

    unsigned long currentMillis_DRY = millis();
    if (currentMillis_DRY - previousMillis_DRY >= intervaloPPAL)

    { // EJECUCIÓN CADA 5MIN //

      previousMillis_DRY = currentMillis_DRY;
      SECADO();
    }
  }
}

//ETAPAS//
void FLORACION() {

  Fotoperiodo_FLW();
  Etapa = "FLORACIÓN";
  Luxometro_Flora();
  Temperatura_Humedad_FLORA();
  Co2_FLORA();
  Temperatura_Solucion_FLORA();
  tds_FLORA();
  Ph_FLORA();
  leer_ETANROFLW_SD();
  Tiempo_Activo();
  Count_Sem_FLW();
  temp_SYST();
  agua_FLORA();
  sol_A_FLORA();
  sol_B_FLORA();
  sol_C_FLORA();
  estabilizador_ph_FLW();
  Leer_Kw_hrs_Acumulado();
  Kw = Kw_hrs;
  Altura_FLORA();
  extrac_FLW();
  Luz_UV_FLORA();
  leer_ETANROFLW_SD();
  Espacio_Libre();
  Bt_WEED();
  Google_WiFi();

}
void VEGETACION() {

  Fotoperiodo_VEG();
  Etapa = "VEGETACIÓN";
  Luxometro_Veg();
  Temperatura_Humedad_VEG();
  Co2_VEG();
  Temperatura_Solucion_VEG();
  tds_VEG();
  Ph_VEG();
  leer_ETANROVEG_SD();
  Tiempo_Activo();
  temp_SYST();
  agua_VEG();
  sol_A_VEG();
  sol_B_VEG();
  sol_C_VEG();
  estabilizador_ph_VEG();
  Leer_Kw_hrs_Acumulado();
  Kw = Kw_hrs;
  Altura_VEG();
  extrac_VEG();
  Luz_UV_VEGETACION();
  leer_ETANROVEG_SD();
  Espacio_Libre();
  Bt_WEED();
  Google_WiFi();

}
void CLONADOR() {

  Fotoperiodo_CLN();
  Etapa = "CLONADOR";
  Luxometro_CLN();
  Temperatura_Humedad_CLN();
  Co2_CLN();
  Temperatura_Solucion_CLN();
  Ec = 0.8;
  Ph = 7;
  leer_ETANROCLN_SD();
  Tiempo_Activo();
  temp_SYST();
  agua_CLN();
  Hydro_A = 0;
  Hydro_B = 0;
  Melesol = 0;
  PhUp = 0;
  PhDown = 0;
  Leer_Kw_hrs_Acumulado();
  Kw = Kw_hrs;
  AlturaLuz = 30;
  Extraccion = 0;
  UV = 175;
  leer_ETANROCLN_SD();
  Espacio_Libre();
  Bt_WEED();
  Google_WiFi();

}
void SECADO() {

  Etapa = "SECADO";
  Luz = 0;
  Temperatura_Humedad_SEC();
  Co2_DRY();
  Sonda = 0;
  Ec = 0;
  Ph = 0;
  leer_ETANRODRY_SD();
  Tiempo_Activo();
  temp_SYST();
  AguaConsumida = 0;
  Hydro_A = 0;
  Hydro_B = 0;
  Melesol = 0;
  PhUp = 0;
  PhDown = 0;
  Leer_Kw_hrs_Acumulado();
  Kw = Kw_hrs;
  AlturaLuz = 0;
  PWM_SEC();
  UV = 0;
  leer_ETANRODRY_SD();
  Espacio_Libre();
  Bt_WEED();
  Google_WiFi();

}

void Reloj_Cada_Segundo(DateTime date) {

  unsigned long Actual_Reloj = millis();

  if (Actual_Reloj - Previo_Reloj >= Cada_segundo) {
    Previo_Reloj = Actual_Reloj;


    dato_Fecha = "";
    dato_Fecha += String(date.year());
    dato_Fecha += "/";
    dato_Fecha += String(date.month());
    dato_Fecha += "/";
    dato_Fecha += String(date.day());

    dato_DiaSemana = "";
    dato_DiaSemana = Dias_Semana[date.dayOfTheWeek()];

    dato_MesAnio = "";
    dato_MesAnio = Nombres_Meses[date.month()];

    dato_Hora = "";
    dato_Hora += String(date.hour());
    dato_Hora += ":";
    dato_Hora += String(date.minute());
    dato_Hora += ":";
    dato_Hora += String(date.second());

    display1.setTextSize(1);
    display1.setTextColor(WHITE);
    display1.setCursor(6, 6);
    display1.print("(");
    display1.print(dato_DiaSemana);
    display1.print(" / ");
    display1.print(dato_MesAnio);
    display1.println(")");
    display1.setTextSize(2);
    display1.setTextColor(WHITE);
    display1.setCursor(10, 25);
    display1.print(dato_Fecha);
    display1.println(" ");
    display1.setTextSize(2);
    display1.setTextColor(WHITE);
    display1.setCursor(10, 45);
    display1.println(dato_Hora);
    display1.display();
    display1.clearDisplay();
  }
}
void Tiempo_Activo() {

  leer_Hrs_SD();
  horas_Totales = hora_actual;
  DiasTotales = horas_Totales / 24;
  dato_DiasTotales = DiasTotales;
  semanas_Totales = DiasTotales / 7;

}
void Count_Sem_FLW() {

  unsigned long hora_Hoy = hora_actual;
  if (hora_Hoy - hora_anterior >= Hrs_X_Semana)
  {
    hora_anterior = hora_Hoy;

    val_sem = Actual_Week ++;

    if (val_sem > 8)
    {
      val_sem = 1;
    }

    EEPROM.write(dire_sem, val_sem);
    delay(pausa);
  }
}
void Act_SEM_FLW() {

  val_sem_EEPROM = EEPROM.read(dire_sem);

  if (val_sem_EEPROM == 0 ) {
    val_sem_EEPROM = Actual_Week;
    EEPROM.write(dire_sem, Actual_Week);
    delay(10);
  }
  if (!Actual_Week == val_sem_EEPROM) {
    Actual_Week = val_sem_EEPROM;
  }
}

// LUXÓMETRO //
void Luxometro_Flora() {

  float Luxos(light1.get_lux());
  Luz = Luxos;
}
void Luxometro_Veg() {

  if (light2.measurementReady()) {
    float Luxos = light2.readLightLevel();
    Luz = Luxos;
  }
}
void Luxometro_CLN() {

  if (light3.measurementReady()) {
    float Luxos = light3.readLightLevel();
    Luz = Luxos;
  }
}

// TEMP-HUM //
void Temperatura_Humedad_FLORA() {

  float humedad_FLORA = dht_FLORA.readHumidity();
  float temperatura_FLORA = dht_FLORA.readTemperature();
  float PotenciaElevada_flw = pow(-2.718, temperatura_FLORA);

  pres_vap_sat_FLORA = 610, 78 * (PotenciaElevada_flw / (temperatura_FLORA + 238, 3) * 17.2694) / 1000;
  def_pres_vap_FLORA = ((((100 - humedad_FLORA) / 100) * pres_vap_sat_FLORA) / 7.501);

  Humedad = humedad_FLORA;
  Temperatura = temperatura_FLORA;
  dpv = def_pres_vap_FLORA;

}
void Temperatura_Humedad_VEG() {

  float humedad_VEG = dht_VEG.readHumidity();
  float temperatura_VEG = dht_VEG.readTemperature();

  float PotenciaElevada_veg = pow(-2.718, temperatura_VEG);

  pres_vap_sat_VEG = 610, 78 * (PotenciaElevada_veg / (temperatura_VEG + 238, 3) * 17.2694) / 1000;
  def_pres_vap_VEG = ((((100 - humedad_VEG) / 100) * pres_vap_sat_VEG) / 7.501);

  dpv = def_pres_vap_VEG;
  Humedad = humedad_VEG;
  Temperatura = temperatura_VEG;

}
void Temperatura_Humedad_SEC() {

  float humedad_SEC = dht_SEC.readHumidity();
  float temperatura_SEC = dht_SEC.readTemperature();
  float PotenciaElevada_sec = pow(-2.718, temperatura_SEC);

  pres_vap_sat_SEC = 610, 78 * (PotenciaElevada_sec / (temperatura_SEC + 238, 3) * 17.2694) / 1000;
  def_pres_vap_SEC = ((((100 - humedad_SEC) / 100) * pres_vap_sat_SEC) / 7.501);

  Humedad = humedad_SEC;
  Temperatura = temperatura_SEC;
  dpv = def_pres_vap_SEC;

  PWM_SEC();

}
void Temperatura_Humedad_CLN() {

  float humedad_CLON = dht_CLON.readHumidity();
  float temperatura_CLON = dht_CLON.readTemperature();
  float PotenciaElevada_cln = pow(-2.718, temperatura_CLON);

  pres_vap_sat_CLN = 610, 78 * (PotenciaElevada_cln / (temperatura_CLON + 238, 3) * 17.2694) / 1000;
  def_pres_vap_CLN = ((((100 - humedad_CLON) / 100) * pres_vap_sat_CLN) / 7.501);

  Humedad = humedad_CLON;
  Temperatura = temperatura_CLON;
  dpv = def_pres_vap_CLN;

}

// SONDAS //
void Temperatura_Solucion_VEG() {

  sensorDS18B20_1.requestTemperatures();
  float Solucion_VEG = (sensorDS18B20_1.getTempCByIndex(0));

  Sonda = Solucion_VEG;

}
void Temperatura_Solucion_FLORA() {

  sensorDS18B20_2.requestTemperatures();
  float Solucion_FLORA = (sensorDS18B20_2.getTempCByIndex(0));

  Sonda = Solucion_FLORA;

}
void Temperatura_Solucion_CLN() {

  sensorDS18B20_3.requestTemperatures();
  float Solucion_CLON = (sensorDS18B20_3.getTempCByIndex(0));

  Sonda = Solucion_CLON;

}

// Co2 //
void Co2_FLORA() {

  float ppm_FLORA = gasSensor1.getPPM();
  Co2 = ppm_FLORA * 1000;

}
void Co2_VEG() {

  float ppm_VEG = gasSensor2.getPPM();
  Co2 = ppm_VEG * 1000;

}
void Co2_CLN() {

  float ppm_CLN = gasSensor3.getPPM();
  Co2 = ppm_CLN * 1000;

}
void Co2_DRY() {

  float ppm_DRY = gasSensor4.getPPM();
  Co2 = ppm_DRY * 1000;

}

// EC - PH //
void tds_FLORA() {
  static unsigned long analogSampleTimepoint_F = millis();
  if (millis() - analogSampleTimepoint_F > 40U)  //every 40 milliseconds,read the analog value from the ADC
  {
    analogSampleTimepoint_F = millis();
    analogBuffer_F[analogBuffer_FIndex] = analogRead(TdsSensorPin_F);    //read the analog value and store into the buffer
    analogBuffer_FIndex++;
    if (analogBuffer_FIndex == SCOUNT_F)
      analogBuffer_FIndex = 0;
  }
  static unsigned long printTimepoint = millis();
  if (millis() - printTimepoint > 800U)
  {
    printTimepoint = millis();
    for (copyIndex_F = 0; copyIndex_F < SCOUNT_F; copyIndex_F++)
      analogBuffer_FTemp[copyIndex_F] = analogBuffer_F[copyIndex_F];
    averageVoltage_F = getMedianNum_F(analogBuffer_FTemp, SCOUNT_F) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value

    float compensationCoefficient = 1.0 + 0.02 * (Temp_F - 25.0);
    //Temp_F compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
    float compensationVolatge = averageVoltage_F / compensationCoefficient;
    //Temp_F compensation

    tdsValue_F = (133.42 * compensationVolatge * compensationVolatge * compensationVolatge - 255.86 * compensationVolatge * compensationVolatge + 857.39 * compensationVolatge) * 0.5;
    //convert voltage value to tds value

    Ec = tdsValue_F;

    //Serial.print("voltage:");
    //Serial.print(averageVoltage_F,2);
    //Serial.print("V   ");

    //Serial.print("TDS Value:");
    //Serial.print(tdsValue_F,0);
    //Serial.println("ppm");

  }
}

int getMedianNum_F(int bArray_F[], int iFilterLen_F)
{
  int bTab_F[iFilterLen_F];
  for (byte i_F = 0; i_F < iFilterLen_F; i_F++)
    bTab_F[i_F] = bArray_F[i_F];
  int i_F, j_F, bTemp_F;
  for (j_F = 0; j_F < iFilterLen_F - 1; j_F++)
  {
    for (i_F = 0; i_F < iFilterLen_F - j_F - 1; i_F++)
    {
      if (bTab_F[i_F] > bTab_F[i_F + 1])
      {
        bTemp_F = bTab_F[i_F];
        bTab_F[i_F] = bTab_F[i_F + 1];
        bTab_F[i_F + 1] = bTemp_F;
      }
    }
  }
  if ((iFilterLen_F & 1) > 0)
    bTemp_F = bTab_F[(iFilterLen_F - 1) / 2];
  else
    bTemp_F = (bTab_F[iFilterLen_F / 2] + bTab_F[iFilterLen_F / 2 - 1]) / 2;
  return bTemp_F;
}

void tds_VEG() {
  static unsigned long analogSampleTimepoint_V = millis();
  if (millis() - analogSampleTimepoint_V > 40U)  //every 40 milliseconds,read the analog value from the ADC
  {
    analogSampleTimepoint_V = millis();
    analogBuffer_V[analogBuffer_VIndex] = analogRead(TdsSensorPin_V);    //read the analog value and store into the buffer
    analogBuffer_VIndex++;
    if (analogBuffer_VIndex == SCOUNT_V)
      analogBuffer_VIndex = 0;
  }
  static unsigned long printTimepoint = millis();
  if (millis() - printTimepoint > 800U)
  {
    printTimepoint = millis();
    for (copyIndex_V = 0; copyIndex_V < SCOUNT_V; copyIndex_V++)
      analogBuffer_VTemp[copyIndex_V] = analogBuffer_V[copyIndex_V];
    averageVoltage_V = getMedianNum_V(analogBuffer_VTemp, SCOUNT_V) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value

    float compensationCoefficient = 1.0 + 0.02 * (Temp_V - 25.0);
    //Temp_V compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
    float compensationVolatge = averageVoltage_V / compensationCoefficient;
    //Temp_V compensation

    tdsValue_V = (133.42 * compensationVolatge * compensationVolatge * compensationVolatge - 255.86 * compensationVolatge * compensationVolatge + 857.39 * compensationVolatge) * 0.5;
    //convert voltage value to tds value

    Ec = tdsValue_V;

    //Serial.print("voltage:");
    //Serial.print(averageVoltage_V,2);
    //Serial.print("V   ");

    //Serial.print("TDS Value:");
    //Serial.print(tdsValue_V,0);
    //Serial.println("ppm");

  }
}

int getMedianNum_V(int bArray_V[], int iFilterLen_V)
{
  int bTab_V[iFilterLen_V];
  for (byte i_V = 0; i_V < iFilterLen_V; i_V++)
    bTab_V[i_V] = bArray_V[i_V];
  int i_V, j_V, bTemp_V;
  for (j_V = 0; j_V < iFilterLen_V - 1; j_V++)
  {
    for (i_V = 0; i_V < iFilterLen_V - j_V - 1; i_V++)
    {
      if (bTab_V[i_V] > bTab_V[i_V + 1])
      {
        bTemp_V = bTab_V[i_V];
        bTab_V[i_V] = bTab_V[i_V + 1];
        bTab_V[i_V + 1] = bTemp_V;
      }
    }
  }
  if ((iFilterLen_V & 1) > 0)
    bTemp_V = bTab_V[(iFilterLen_V - 1) / 2];
  else
    bTemp_V = (bTab_V[iFilterLen_V / 2] + bTab_V[iFilterLen_V / 2 - 1]) / 2;
  return bTemp_V;
}

void Ph_FLORA() {

  for (int i_ph_f = 0; i_ph_f < 10; i_ph_f++)
  {
    buffer_arr_F[i_ph_f] = analogRead(PhSensorPin_F);
    delay(pausa);
  }
  for (int i_ph_f = 0; i_ph_f < 9; i_ph_f++)
  {
    for (int j_ph_f = i_ph_f + 1; j_ph_f < 10; j_ph_f++)
    {
      if (buffer_arr_F[i_ph_f] > buffer_arr_F[j_ph_f])
      {
        temp1 = buffer_arr_F[i_ph_f];
        buffer_arr_F[i_ph_f] = buffer_arr_F[j_ph_f];
        buffer_arr_F[j_ph_f] = temp1;
      }
    }
  }

  avgval1 = 0;
  for (int i_ph_f = 2; i_ph_f < 8; i_ph_f++)
    avgval1 += buffer_arr_F[i_ph_f];
  float volt_F = (float)avgval1 * 5.0 / 1024 / 6;
  float ph_act_F = -5.70 * volt_F + calibration_value;
  Ph = ph_act_F;
  ph_FLW_actual = ph_act_F;

  /*
    Serial.print("pH Val:");
    Serial.print(ph_act_F);
    delay(pausa);
  */
}
void Ph_VEG() {

  for (int i_ph_v = 0; i_ph_v < 10; i_ph_v++)
  {
    buffer_arr_V[i_ph_v] = analogRead(PhSensorPin_V);
    delay(pausa);
  }
  for (int i_ph_v = 0; i_ph_v < 9; i_ph_v++)
  {
    for (int j_ph_v = i_ph_v + 1; j_ph_v < 10; j_ph_v++)
    {
      if (buffer_arr_V[i_ph_v] > buffer_arr_V[j_ph_v])
      {
        temp2 = buffer_arr_V[i_ph_v];
        buffer_arr_V[i_ph_v] = buffer_arr_V[j_ph_v];
        buffer_arr_V[j_ph_v] = temp2;
      }
    }
  }

  avgval2 = 0;
  for (int i_ph_v = 2; i_ph_v < 8; i_ph_v++)
    avgval2 += buffer_arr_V[i_ph_v];
  float volt_V = (float)avgval2 * 5.0 / 1024 / 6;
  float ph_act_V = -5.70 * volt_V + calibration_value;

  Ph = ph_act_V;
  ph_VEG_actual = ph_act_V;

  /*
    Serial.print("pH Val:");
    Serial.print(ph_act_V);
    delay(pausa);
  */
}

void estabilizador_ph_FLW() {

  unsigned long T_act_Ph_F = millis();

  if (T_act_Ph_F - T_prev_Ph_F >= lectura_Ph)
  {
    T_prev_Ph_F = T_act_Ph_F;
    counter_Ph_F ++;
    Ph_medi_F = Ph_medi_F + ph_FLW_actual;
    pcf8574_2.digitalWrite(Mixer, HIGH);

  } else {
    pcf8574_2.digitalWrite(Mixer, LOW);
  }

  if (counter_Ph_F >= veces)
  {
    Ph_medi_F = (Ph_medi_F / veces);

    if (ledStateFLW == 1 && edo_Up_FLW == 1 && (Ph_medi_F >= 5.3 || Ph_medi_F <= 5.8 ) )
    {
      edo_hydroA_FLW = 0;
      edo_hydroB_FLW = 0;
      edo_hydroC_FLW = 0;
      edo_Dw_FLW = 0;
      edo_Up_FLW = 0;

      pcf8574_1.digitalWrite(hydro_UP_FLW, LOW);
      pcf8574_1.digitalWrite(hydro_DW_FLW, LOW);
      digitalWrite(Circula_FLW, HIGH);

      PhUp = 0;
      PhDown = 0;

    }


    else if (ledStateFLW == 1 && edo_Up_FLW == 1 && (Ph_medi_F < 5.3 ) )
    {
      digitalWrite(Circula_FLW, LOW);
      pcf8574_1.digitalWrite(hydro_UP_FLW, HIGH);
      delay(Carga * 1000);
      pcf8574_1.digitalWrite(hydro_UP_FLW, LOW);
      pcf8574_2.digitalWrite(Mixer, HIGH);
      PhUp = Carga;
    }
    else if (ledStateFLW == 1 && edo_Dw_FLW == 1 && (Ph_medi_F > 5.8 ) )
    {
      digitalWrite(Circula_FLW, LOW);
      pcf8574_1.digitalWrite(hydro_DW_FLW, HIGH);
      delay(Carga * 1000);
      pcf8574_1.digitalWrite(hydro_DW_FLW, LOW);
      pcf8574_2.digitalWrite(Mixer, HIGH);
      PhDown = Carga;
    }
    counter_Ph_F = 0;

  }
}
void estabilizador_ph_VEG() {

  unsigned long T_act_Ph_V = millis();

  if (T_act_Ph_V - T_prev_Ph_V >= lectura_Ph)
  {
    T_prev_Ph_V = T_act_Ph_V;
    Ph_VEG();
    counter_Ph_V ++;
    Ph_medi_V = Ph_medi_V + ph_VEG_actual;
    pcf8574_2.digitalWrite(Mixer, HIGH);

  } else {
    pcf8574_2.digitalWrite(Mixer, LOW);
  }
  if (counter_Ph_V >= veces)
  {

    Ph_medi_V = (Ph_medi_V / veces);

    if (ledStateVEG == 1 && (edo_Up_VEG == 1 || edo_Up_VEG == 0) && (Ph_medi_V >= 5.3 && Ph_medi_V <= 5.8 ) )
    {
      edo_hydroA_VEG = 0;
      edo_hydroB_VEG = 0;
      edo_hydroC_VEG = 0;
      edo_Dw_VEG = 0;
      edo_Up_VEG = 0;

      pcf8574_2.digitalWrite(hydro_UP_VEG, LOW);
      pcf8574_2.digitalWrite(hydro_DW_VEG, LOW);
      digitalWrite(Circula_VEG, HIGH);
      PhUp = 0;
      PhDown = 0;
    }
    if (ledStateFLW == 1 && edo_Up_FLW == 1 && (Ph_medi_V < 5.3 ) )
    {
      digitalWrite(Circula_VEG, LOW);
      pcf8574_2.digitalWrite(hydro_UP_VEG, HIGH);
      delay(Carga * 1000);
      pcf8574_2.digitalWrite(hydro_UP_VEG, LOW);
      pcf8574_2.digitalWrite(Mixer, HIGH);
      PhUp = Carga;
    }

    if (ledStateFLW == 1 && edo_Dw_VEG == 1 && (Ph_medi_V > 5.8 ) )
    {
      digitalWrite(Circula_VEG, LOW);
      pcf8574_2.digitalWrite(hydro_DW_VEG, HIGH);
      delay(Carga * 1000);
      pcf8574_2.digitalWrite(hydro_DW_VEG, LOW);
      pcf8574_2.digitalWrite(Mixer, HIGH);
      PhDown = Carga;
    }
    counter_Ph_V = 0;
  }

  if (Ph_medi_F < 5.3 && edo_Up_FLW == 0)
  {
    edo_Dw_FLW = 1;
  }
  if (Ph_medi_F > 5.8 && edo_Dw_FLW == 0)
  {
    edo_Dw_FLW = 1;
  }


  if (Ph_medi_V < 5.3 && edo_Up_VEG == 0)
  {
    edo_Dw_FLW = 1;
  }
  if (Ph_medi_V > 5.8 && edo_Dw_VEG == 0)
  {
    edo_Dw_FLW = 1;
  }

}

// COMIDA //
void sol_A_FLORA() {

  val_sem_EEPROM = EEPROM.read(dire_sem);
  float Hydro_AB_In;

  switch (val_sem_EEPROM)
  {
    case 1:
      Hydro_AB_In = Sol_AB_FLW_SEM1;
      break;
    case 2:
      Hydro_AB_In = Sol_AB_FLW_SEM2;
      break;
    case 3:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 4:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 5:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 6:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 7:
      Hydro_AB_In = Sol_AB_FLW_SEM7;
      break;
    case 8:
      Hydro_AB_In = 0;
      break;
    default:
      Hydro_AB_In = 0;
  }

  // CÁLCULO DE mLts POR LITROS AGREGADOS //

  float Mls_AB = ((Litros_Agua_FLW * Hydro_AB_In) / 10);
  long T_bomb_dosif = (((Mls_AB * 60) / Mlt_X_Min) * 1000);

  Hydro_A = Mls_AB; // STRING PARA URL Y SD //

  if (edo_hydroA_FLW == 1 && (edoPeris_A_F == LOW || edoPeris_A_F == HIGH))
  {
    digitalWrite(Circula_FLW, LOW);
    edoPeris_A_F = LOW;
    unsigned long Tiempo_ON_act_A_F = millis();

    if (Tiempo_ON_act_A_F - Tiempo_ON_prev_A_F >= T_bomb_dosif)
    {
      Tiempo_ON_prev_A_F = Tiempo_ON_act_A_F;

      if (edoPeris_A_F == LOW)
      {
        edoPeris_A_F = HIGH;
        if (edo_hydroB_FLW == 1 && edoPeris_B_F == HIGH)
        {
          ti_mixer = millis();
        }
      } else
      {
        edoPeris_A_F = LOW;
        if (edo_hydroA_FLW == 1 && edoPeris_A_F == LOW)
        {
          tf_mixer = millis();
          tT_mixer = tf_mixer - ti_mixer;
        }
      }

      pcf8574_1.digitalWrite(hydro_A_FLW, edoPeris_A_F);
    }
  }
  tT_mixer_Suma = tT_mixer_Suma + tT_mixer;
}
void sol_B_FLORA() {

  val_sem_EEPROM = EEPROM.read(dire_sem);
  float Hydro_AB_In;

  switch (val_sem_EEPROM)
  {
    case 1:
      Hydro_AB_In = Sol_AB_FLW_SEM1;
      break;
    case 2:
      Hydro_AB_In = Sol_AB_FLW_SEM2;
      break;
    case 3:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 4:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 5:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 6:
      Hydro_AB_In = Sol_AB_FLW_SEM3_6;
      break;
    case 7:
      Hydro_AB_In = Sol_AB_FLW_SEM7;
      break;
    case 8:
      Hydro_AB_In = 0;
      break;
    default:
      Hydro_AB_In = 0;
  }

  // CÁLCULO DE mLts POR LITROS AGREGADOS //

  float Mls_AB = ((Litros_Agua_FLW * Hydro_AB_In) / 10.0);
  unsigned long T_bomb_dosif = (((Mls_AB * 60) / Mlt_X_Min) * 1000);

  Hydro_B = Mls_AB; // STRING PARA URL Y SD //

  if (edo_hydroB_FLW == 1 && (edoPeris_B_F == LOW || edoPeris_B_F == HIGH))
  {
    digitalWrite(Circula_FLW, LOW);
    edoPeris_B_F = LOW;
    unsigned long Tiempo_ON_act_B_F = millis();

    if (Tiempo_ON_act_B_F - Tiempo_ON_prev_B_F >= T_bomb_dosif)
    {
      Tiempo_ON_prev_B_F = Tiempo_ON_act_B_F;

      if (edoPeris_B_F == LOW) {
        edoPeris_B_F = HIGH;
        if (edo_hydroB_FLW == 1 && edoPeris_B_F == HIGH)
        {
          ti_mixer = millis();
        }
      } else {
        edoPeris_B_F = LOW;
        if (edo_hydroB_FLW == 1 && edoPeris_B_F == LOW)
        {
          tf_mixer = millis();
          tT_mixer = tf_mixer - ti_mixer;
        }
      }
      pcf8574_1.digitalWrite(hydro_B_FLW, edoPeris_B_F);
    }
  }
  tT_mixer_Suma = tT_mixer_Suma + tT_mixer;
}
void sol_C_FLORA() {

  val_sem_EEPROM = EEPROM.read(dire_sem);
  float Hydro_C_In_FLW;

  switch (val_sem_EEPROM)
  {

    case 6:
      Hydro_C_In_FLW = Sol_C_FLW_SEM6;
      break;
    case 7:
      Hydro_C_In_FLW = Sol_C_FLW_SEM7;
      break;
    case 8:
      Hydro_C_In_FLW = Sol_C_FLW_SEM8;
      break;
    default:
      Hydro_C_In_FLW = 0;
  }

  // CÁLCULO DE mLts POR LITROS AGREGADOS //

  float Mls_MELESOL = ((Litros_Agua_FLW * Hydro_C_In_FLW) / 10.0);
  long T_bomb_dosif = (((Mls_MELESOL * 60) / Mlt_X_Min) * 1000);

  Melesol = Mls_MELESOL; // STRING PARA URL Y SD //

  if (edo_hydroC_FLW == 1 && (edoPeris_C_F == LOW || edoPeris_C_F == HIGH))
  {
    digitalWrite(Circula_FLW, LOW);
    edoPeris_C_F = LOW;
    unsigned long Tiempo_ON_act_C_F = millis();

    if (Tiempo_ON_act_C_F - Tiempo_ON_prev_C_F >= T_bomb_dosif)
    {
      Tiempo_ON_prev_C_F = Tiempo_ON_act_C_F;

      if (edoPeris_C_F == LOW)
      {
        edoPeris_C_F = HIGH;

        if (edo_hydroC_FLW == 1 && edoPeris_C_F == HIGH)
        {
          ti_mixer = millis();
        }
      }
      else
      {
        edoPeris_C_F = LOW;
        if (edo_hydroC_FLW == 1 && edoPeris_C_F == LOW)
        {
          tf_mixer = millis();
          tT_mixer = tf_mixer - ti_mixer;
        }
      }
      pcf8574_1.digitalWrite(hydro_C_FLW, edoPeris_C_F);
    }
  }
  tT_mixer_Suma = tT_mixer_Suma + tT_mixer;
}

void sol_A_VEG() {

  val_sem_EEPROM = EEPROM.read(dire_sem);
  float Hydro_AB_In_VEG;

  switch (val_sem_EEPROM)
  {
    default:
      Hydro_AB_In_VEG = Sol_AB_VEG;
  }

  // CÁLCULO DE mLts POR LITROS AGREGADOS //

  float Mls_AB = ((Litros_Agua_VEG * Hydro_AB_In_VEG) / 10);
  int T_bomb_dosif = (((Mls_AB * 60) / Mlt_X_Min) * 1000);

  Hydro_A = Mls_AB; // STRING PARA URL Y SD //

  if (edo_hydroA_VEG == 1 && (edoPeris_A_V == HIGH || edoPeris_A_V == LOW) )
  {
    digitalWrite(Circula_VEG, LOW);
    edoPeris_A_V = LOW;
    unsigned long Tiempo_ON_act_A_V = millis();

    if (Tiempo_ON_act_A_V - Tiempo_ON_prev_A_V >= T_bomb_dosif) {
      Tiempo_ON_prev_A_V = Tiempo_ON_act_A_V;

      if (edoPeris_A_V == LOW)
      {
        edoPeris_A_V = HIGH;

        if (edo_hydroA_VEG == 1 && edoPeris_A_V == HIGH)
        {
          ti_mixer = millis();
        }
      }
      else
      {
        edoPeris_A_V = LOW;
        if (edo_hydroA_VEG == 1 && edoPeris_A_V == LOW)
        {
          tf_mixer = millis();
          tT_mixer = tf_mixer - ti_mixer;
        }
      }

      pcf8574_1.digitalWrite(hydro_A_VEG, edoPeris_A_V);
    }
  }
  tT_mixer_Suma = tT_mixer_Suma + tT_mixer;
}
void sol_B_VEG() {

  val_sem_EEPROM = EEPROM.read(dire_sem);
  float Hydro_AB_In_VEG;

  switch (val_sem_EEPROM)
  {
    default:
      Hydro_AB_In_VEG = Sol_AB_VEG;
  }

  // CÁLCULO DE mLts POR LITROS AGREGADOS //

  float Mls_AB = ((Litros_Agua_VEG * Hydro_AB_In_VEG) / 10);
  int T_bomb_dosif = (((Mls_AB * 60) / Mlt_X_Min) * 1000);

  Hydro_B = Mls_AB; // STRING PARA URL Y SD //

  if (edo_hydroB_VEG == 1 && (edoPeris_B_V == HIGH || edoPeris_B_V == LOW) )
  {
    digitalWrite(Circula_VEG, LOW);
    ti_mixer = millis();
    edoPeris_B_V = LOW;
    unsigned long Tiempo_ON_act_B_V = millis();

    if (Tiempo_ON_act_B_V - Tiempo_ON_prev_B_V >= T_bomb_dosif) {
      Tiempo_ON_prev_B_V = Tiempo_ON_act_B_V;

      if (edoPeris_B_V == LOW)
      {
        edoPeris_B_V = HIGH;

        if (edo_hydroB_VEG == 1 && edoPeris_B_V == HIGH)
        {
          ti_mixer = millis();
        }
      }
      else
      {
        edoPeris_B_V = LOW;
        if (edo_hydroB_VEG == 1 && edoPeris_B_V == LOW)
        {
          tf_mixer = millis();
          tT_mixer = tf_mixer - ti_mixer;
        }
      }

      pcf8574_1.digitalWrite(hydro_B_VEG, edoPeris_B_V);
    }
  }
  tT_mixer_Suma = tT_mixer_Suma + tT_mixer;
}
void sol_C_VEG() {

  val_sem_EEPROM = EEPROM.read(dire_sem);
  float Hydro_ROOTS_In;

  switch (val_sem_EEPROM)
  {
    case 1:
      Hydro_ROOTS_In = Sol_C_VEG_SEM_1;
      break;
    case 2:
      Hydro_ROOTS_In = Sol_C_VEG_SEM_2;
      break;
    case 3:
      Hydro_ROOTS_In = Sol_C_VEG_SEM_3;
      break;
    default:
      Hydro_ROOTS_In = 0;
  }

  // CÁLCULO DE mLts POR LITROS AGREGADOS //

  float Mls_ROOTS = ((Litros_Agua_VEG * Hydro_ROOTS_In) / 10);
  long T_bomb_dosif = (((Mls_ROOTS * 60) / Mlt_X_Min) * 1000);

  Melesol = Mls_ROOTS; // STRING PARA URL Y SD //

  if (edo_hydroC_VEG == 1 && (edoPeris_C_V == LOW || edoPeris_C_V == HIGH))
  {
    digitalWrite(Circula_VEG, LOW);
    ti_mixer = millis();
    edoPeris_C_V = LOW;
    unsigned long Tiempo_ON_act_C_V = millis();

    if (Tiempo_ON_act_C_V - Tiempo_ON_prev_C_V >= T_bomb_dosif) {
      Tiempo_ON_prev_C_V = Tiempo_ON_act_C_V;

      if (edoPeris_C_V == LOW) {
        edoPeris_C_V = HIGH;

        if (edo_hydroC_VEG == 1 && edoPeris_C_V == HIGH)
        {
          ti_mixer = millis();
        }
      }
      else
      {
        edoPeris_C_V = LOW;
        if (edo_hydroC_VEG == 1 && edoPeris_C_V == LOW)
        {
          tf_mixer = millis();
          tT_mixer = tf_mixer - ti_mixer;
        }
      }

      pcf8574_1.digitalWrite(hydro_A_FLW, edoPeris_A_F);
    }
  }
  tT_mixer_Suma = tT_mixer_Suma + tT_mixer;
}

// DISTANCIAS //
void Altura_FLORA() {

  float izq_FLW = (sensor_1.ping_cm());

  float der_FLW = (sensor_2.ping_cm());


  Distancia_media = (izq_FLW + der_FLW ) / 2 ;
  dato_AlturaLuz = Distancia_media ;
  Dist_act_flw = Distancia_media ;


  if (Dist_ant_flw - Dist_act_flw > Distancia_media)
  {
    Dist_ant_flw = Dist_act_flw;
    Crecimiento = Dist_ant_flw - Dist_act_flw;

  }

  PWM_FLORA ();
}
void Altura_VEG() {

  float izq_VEG = (sensor_3.ping_cm());

  float der_VEG = (sensor_4.ping_cm());


  Distancia_media = (izq_VEG + der_VEG ) / 2 ;
  dato_AlturaLuz = Distancia_media ;
  Dist_act_veg = Distancia_media ;


  if (Dist_act_veg - Dist_ant_veg > Distancia_media)
  {
    Dist_ant_veg = Dist_act_veg;
    float
    Crecimiento = Dist_act_veg - Dist_ant_veg ;

  }
  PWM_VEG();
}

// POTENCIÓMETROS //
void POT_FLW () {
  // POTENCIÓMETRO ALTURA FLORACIÓN //
  float pot_Alt_FLW = analogRead(pot_FLW);
  analogWrite(motor_FLW, pot_Alt_FLW);

  //Serial.print (((pot_Alt_FLW) / 1023) * 100);
  //Serial.println (" % ");
  //delay(500);
}
void POT_VEG () {
  // POTENCIÓMETRO ALTURA VEGETACIÓN //
  float pot_Alt_VEG = analogRead(pot_VEG);
  analogWrite(motor_VEG, pot_Alt_VEG);

  /*Serial.print (((pot_Alt_VEG) / 1023) * 100);
    Serial.println (" % ");
    delay(500);*/
}

// PWM ALTURAS Y SECADO //
void PWM_FLORA () { // PWM FLORA //

  float pwm_altura_flw  = map(Distancia_media, 30.0, 20.0, 0, 255.0);
  analogWrite(motor_FLW, pwm_altura_flw);

  /*Serial.print ((pwm_altura_flw / 255) * 100);
    Serial.println (" % ");
    delay(500);*/
}
void PWM_VEG() {    // PWM VEG   //

  float pwm_altura_veg  = map(Distancia_media, 30., 20.0, 0, 255.0);
  analogWrite(motor_VEG, pwm_altura_veg);

  /*Serial.print ((pwm_altura_veg / 255) * 100);
    Serial.println (" % ");
    delay(500);*/
}
void PWM_SEC() {    // PWM SEC   //

  float pwm_sec  = map(def_pres_vap_SEC, -1, 9, 0, 255.0);
  analogWrite(motor_SEC, pwm_sec);

  Extraccion = (pwm_sec / 255) * 100;

  /*Serial.print ((pwm_sec/255)*100);
    Serial.println (" % ");
    delay(500);*/
}

// EXTRACCIÓN SERVO FLORA Y VEG //
void extrac_FLW() {
  anguloFLW = def_pres_vap_FLORA;
  anguloFLW = map(anguloFLW, -1, 9, 180, 0);
  servo_FLORA.write(anguloFLW);
  delay(pausa);

  Extraccion = (anguloFLW * 100) / 180;

}
void extrac_VEG() {
  anguloVEG = def_pres_vap_VEG;
  anguloVEG = map(anguloVEG, -1, 9, 180, 0);
  servo_VEG.write(anguloVEG);
  delay(pausa);

  Extraccion = (anguloVEG * 100) / 180;

}

// UV //
void Luz_UV_FLORA() {

  float UV_FLW  = UvFLW.getUV();
  float DUV_FLW = UvFLW.estimateDUVindex(UV_FLW);
  float factor_flw = DUV_FLW / UV_FLW;

  cuenta1++;
  suma1 += factor_flw;
  float promedioFLW (suma1 / cuenta1);

  UV = promedioFLW;

}
void Luz_UV_VEGETACION() {

  float UV_VEG  = UvVEG.getUV();
  float DUV_VEG = UvVEG.estimateDUVindex(UV_VEG);
  float factor_veg = DUV_VEG / UV_VEG;

  cuenta1++;
  suma2 += factor_veg;
  float promedioVEG (suma2 / cuenta2);

  UV = promedioVEG;

}

//TABLERO PPAL//
void  guardar_sd() {    // Guardar Datos por Etapa //

  String dataString_SD = "";
  dataString_SD += String(dato_Fecha + ',' + dato_Hora + ',' + dato_Etapa + ',' + dato_Luz + ',' + dato_Humedad + ',' + dato_Temperatura + ',' + dato_dpv + ',' + dato_Co2 + ',' + dato_Sonda + ',' + dato_Ec + ',' + dato_Ph + ',' + dato_DiaNumero + ',' + dato_DiasTotales + ',' + dato_TempSYST + ',' + dato_AguaConsumida + ',' + dato_A + ',' + dato_B + ',' + dato_C + ',' + dato_PhUp + ',' + dato_PhDown + ',' + dato_Kw + ',' + dato_AlturaLuz + ',' + dato_Extraccion + ',' + dato_UV + ',' + dato_Crecimiento + ',' + dato_PotenciaLuz + ',' + dato_EtapaNro + ',' + dato_EspacioLibre + ',' + dato_EdoWifi + ',' + dato_EdoBT);


  File HIDROWEED = SD.open("HIDROWEED.txt", FILE_WRITE);
  if (HIDROWEED) {


    HIDROWEED.println(dataString_SD);
    HIDROWEED.close();
    String dataString_SD = "";
    Micro_sd();

  } else {

    // Serial.println("error al abrir HIDROWEED.txt");
    String dataString_SD = "";
  }

}

// RIEGO Y CIRCULACIÓN //
void agua_FLORA() {

  if (digitalRead(nivel_FLW) == LOW && digitalRead(nivel_VEG) == HIGH && digitalRead(nivel_CLN) == HIGH)
  {
    pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
    pcf8574_2.digitalWrite(electrovalvula_FLW, HIGH);
    if (digitalRead(bomba_AguaLimpia) == LOW && edo_hydroA_FLW == 0  &&  edo_hydroB_FLW == 0 &&  edo_hydroC_FLW == 0 &&  edo_Up_FLW == 0 &&  edo_Dw_FLW == 0)
    {
      if ( nivel_Agua == HIGH )
      {
        digitalWrite(bomba_AguaLimpia, HIGH);
        edo_hydroA_FLW = 1;
        edo_hydroB_FLW = 1;
        edo_hydroC_FLW = 1;
        edo_Up_FLW = 1;
        edo_Dw_FLW = 1;
        tT_bomba_AguaLimpia = 0;

        if (digitalRead (bomba_AguaLimpia) == HIGH && edo_bomba_AguaLimpia == 0)
        {
          edo_bomba_AguaLimpia = 1;
          tI_bomba_AguaLimpia = millis();
        }
      }
    }
    else
    {
      digitalWrite(bomba_AguaLimpia, LOW);
      pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);
      Litros_Agua_FLW = 0.0;
    }
  }
  else if (digitalRead(nivel_FLW) == HIGH && digitalRead(nivel_VEG) == HIGH && digitalRead(nivel_CLN) == HIGH)
  {
    digitalWrite(bomba_AguaLimpia, LOW);
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);

    if (digitalRead (bomba_AguaLimpia) == LOW && edo_bomba_AguaLimpia == 1)
    {
      edo_bomba_AguaLimpia = 0;
      tF_bomba_AguaLimpia = millis();
      tT_bomba_AguaLimpia = (tF_bomba_AguaLimpia - tI_bomba_AguaLimpia) / 1000;
    }

    Litros_Agua_FLW = ((Lts_X_Hrs * tT_bomba_AguaLimpia) / 3600);
  }
  else
  {
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);
  }

  if (digitalRead(nivel_FLW) == LOW && nivel_Agua == LOW)
  {
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);
    pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
    digitalWrite(bomba_AguaLimpia, LOW);
  }

  Escr_Lts_FLW_SD() ;
}
void agua_VEG() {

  if (digitalRead(nivel_VEG) == LOW && digitalRead(nivel_FLW) == HIGH && digitalRead(nivel_CLN) == HIGH)
  {
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
    pcf8574_2.digitalWrite(electrovalvula_VEG, HIGH);
    if (digitalRead(bomba_AguaLimpia) == LOW && edo_hydroA_VEG == 0  &&  edo_hydroB_VEG == 0 &&  edo_hydroC_VEG == 0 &&  edo_Up_VEG == 0 &&  edo_Dw_VEG == 0)
    {
      if ( nivel_Agua == HIGH )
      {
        digitalWrite(bomba_AguaLimpia, HIGH);
        edo_hydroA_VEG = 1;
        edo_hydroB_VEG = 1;
        edo_hydroC_VEG = 1;
        edo_Up_VEG = 1;
        edo_Dw_VEG = 1;
        tT_bomba_AguaLimpia = 0;

        if (digitalRead (bomba_AguaLimpia) == HIGH && edo_bomba_AguaLimpia == 0)
        {
          edo_bomba_AguaLimpia = 1;
          tI_bomba_AguaLimpia = millis();
        }
      }
    }
    else
    {
      digitalWrite(bomba_AguaLimpia, LOW);
      pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);
      Litros_Agua_VEG = 0.0;
    }
  }
  else if (digitalRead(nivel_VEG) == HIGH && digitalRead(nivel_FLW) == HIGH && digitalRead(nivel_CLN) == HIGH)
  {
    digitalWrite(bomba_AguaLimpia, LOW);
    pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);

    if (digitalRead (bomba_AguaLimpia) == LOW && edo_bomba_AguaLimpia == 1)
    {
      edo_bomba_AguaLimpia = 0;
      tF_bomba_AguaLimpia = millis();
      tT_bomba_AguaLimpia = (tF_bomba_AguaLimpia - tI_bomba_AguaLimpia) / 1000;
    }

    Litros_Agua_VEG = ((Lts_X_Hrs * tT_bomba_AguaLimpia) / 3600);
  }
  else
  {
    pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);
  }

  if (digitalRead(nivel_VEG) == LOW && nivel_Agua == LOW)
  {
    pcf8574_2.digitalWrite(electrovalvula_VEG, LOW);
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
    digitalWrite(bomba_AguaLimpia, LOW);
  }

  Escr_Lts_VEG_SD () ;
}
void agua_CLN() {

  if (digitalRead(nivel_CLN) == LOW && digitalRead(nivel_FLW) == HIGH && digitalRead(nivel_CLN) == HIGH)
  {
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, HIGH);
    if (digitalRead(bomba_AguaLimpia) == LOW && edo_WTR_cln == 0)
    {
      if ( nivel_Agua == HIGH )
      {
        digitalWrite(bomba_AguaLimpia, HIGH);
        edo_WTR_cln = 1;
        tT_bomba_AguaLimpia = 0;

        if (digitalRead (bomba_AguaLimpia) == HIGH && edo_bomba_AguaLimpia == 0)
        {
          edo_bomba_AguaLimpia = 1;
          tI_bomba_AguaLimpia = millis();
        }
      }
    }
    else
    {
      digitalWrite(bomba_AguaLimpia, LOW);
      pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
      Litros_Agua_CLN = 0.0;
    }
  }
  else if (digitalRead(nivel_CLN) == HIGH && digitalRead(nivel_FLW) == HIGH && digitalRead(nivel_CLN) == HIGH)
  {
    digitalWrite(bomba_AguaLimpia, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);

    if (digitalRead (bomba_AguaLimpia) == LOW && edo_bomba_AguaLimpia == 1)
    {
      edo_bomba_AguaLimpia = 0;
      tF_bomba_AguaLimpia = millis();
      tT_bomba_AguaLimpia = (tF_bomba_AguaLimpia - tI_bomba_AguaLimpia) / 1000;
      edo_WTR_cln = 1;
    }

    Litros_Agua_CLN = ((Lts_X_Hrs * tT_bomba_AguaLimpia) / 3600);
  }
  else
  {
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
  }

  if (digitalRead(nivel_CLN) == LOW && nivel_Agua == LOW)
  {
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
    pcf8574_2.digitalWrite(electrovalvula_FLW, LOW);
    pcf8574_2.digitalWrite(electrovalvula_CLN, LOW);
    digitalWrite(bomba_AguaLimpia, LOW);
  }
  Escr_Lts_CLN_SD () ;
}

void Leer_Lts_FLW_SD() { // OBTIENE DATO Lts_FLW_Totales //
  
  Lts_FLW = SD.open("Lts_FLW.txt", FILE_WRITE);
  Lts_FLW.close();
  delay(pausa);
  
  Lts_FLW = SD.open("Lts_FLW.txt", FILE_READ);

  if (Lts_FLW)
  {
    bool line_Lts_FLW = false;
    Lts_FLW.seek(Lts_FLW.size() - 1);

    while (Lts_FLW.available())
    {
      if (line_Lts_FLW == false)
      {
        char caracterLts_FLW = Lts_FLW.read();
        Lts_FLW.seek(Lts_FLW.position() - 2);
        if (caracterLts_FLW == '\n')
        {
          line_Lts_FLW = true;
        }
      }

      if (line_Lts_FLW == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterLts_FLW = Lts_FLW.read();
        cadenaLts_FLW = cadenaLts_FLW + caracterLts_FLW;
        if (caracterLts_FLW == ' ')
        {
          break;
        }
      }
    }
    Lts_FLW.close();
    Lts_FLW_Totales = cadenaLts_FLW.toInt();

    delay(pausa);

    char root = cadenaLts_FLW[10];
    //  Serial.print("cadenaLts_FLW Leida: ");
    //  Serial.println(cadenaLts_FLW);
    //  Serial.println(Lts_FLW_Totales);
        delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadenaLts_FLW = "";
}
void Escr_Lts_FLW_SD() {

  Leer_Lts_FLW_SD();
  
  Lts_FLW = SD.open("Lts_FLW.txt", FILE_WRITE);
  if (Lts_FLW)
  {
    lts_ACU_FLW = Lts_FLW_Totales + Litros_Agua_FLW;
    Lts_FLW.println();
    Lts_FLW.print(lts_ACU_FLW);
    Lts_FLW.print(" ");
    Lts_FLW.close();
    AguaConsumida = lts_ACU_FLW;
  }
 lts_ACU_FLW = 0;
}

void Leer_Lts_VEG_SD() { // OBTIENE DATO Lts_VEG_Totales //
  
    Lts_VEG = SD.open("Lts_VEG.txt", FILE_WRITE);
    Lts_VEG.close();
    delay(pausa);

  Lts_VEG = SD.open("Lts_VEG.txt", FILE_READ);

  if (Lts_VEG)
  {
    bool line_Lts_VEG = false;
    Lts_VEG.seek(Lts_VEG.size() - 1);

    while (Lts_VEG.available())
    {
      if (line_Lts_VEG == false)
      {
        char caracterLts_VEG = Lts_VEG.read();
        Lts_VEG.seek(Lts_VEG.position() - 2);
        if (caracterLts_VEG == '\n')
        {
          line_Lts_VEG = true;
        }
      }

      if (line_Lts_VEG == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterLts_VEG = Lts_VEG.read();
        cadenaLts_VEG = cadenaLts_VEG + caracterLts_VEG;
        if (caracterLts_VEG == ' ')
        {
          break;
        }
      }
    }
    Lts_VEG.close();
    Lts_VEG_Totales = cadenaLts_VEG.toInt();

    delay(pausa);

    char root = cadenaLts_VEG[10];
    //  Serial.print("cadenaLts_VEG Leida: ");
    //  Serial.println(cadenaLts_VEG);
    //  Serial.println(Lts_VEG_Totales);
        delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadenaLts_VEG = "";
}
void Escr_Lts_VEG_SD() {

  Leer_Lts_VEG_SD();
  Lts_VEG = SD.open("Lts_VEG.txt", FILE_WRITE);
  if (Lts_VEG)
  {
    lts_ACU_VEG = Lts_VEG_Totales + Litros_Agua_VEG;
    Lts_VEG.println();
    Lts_VEG.print(lts_ACU_VEG);
    Lts_VEG.print(" ");
    Lts_VEG.close();
    AguaConsumida = lts_ACU_VEG;

  }
 lts_ACU_VEG = 0;
}

void Leer_Lts_CLN_SD() { // OBTIENE DATO Lts_CLN_Totales //
  
  Lts_CLN = SD.open("Lts_CLN.txt", FILE_WRITE);
  Lts_CLN.close();
  delay(pausa);

  Lts_CLN = SD.open("Lts_CLN.txt", FILE_READ);

  if (Lts_CLN)
  {
    bool line_Lts_CLN = false;
    Lts_CLN.seek(Lts_CLN.size() - 1);

    while (Lts_CLN.available())
    {
      if (line_Lts_CLN == false)
      {
        char caracterLts_CLN = Lts_CLN.read();
        Lts_CLN.seek(Lts_CLN.position() - 2);
        if (caracterLts_CLN == '\n')
        {
          line_Lts_CLN = true;
        }
      }

      if (line_Lts_CLN == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterLts_CLN = Lts_CLN.read();
        cadenaLts_CLN = cadenaLts_CLN + caracterLts_CLN;
        if (caracterLts_CLN == ' ')
        {
          break;
        }
      }
    }
    Lts_CLN.close();
    Lts_CLN_Totales = cadenaLts_CLN.toInt();

    delay(pausa);

    char root = cadenaLts_CLN[10];
    //  Serial.print("cadenaLts_CLN Leida: ");
    //  Serial.println(cadenaLts_CLN);
    //  Serial.println(Lts_CLN_Totales);
        delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadenaLts_CLN = "";
}
void Escr_Lts_CLN_SD() {

  Leer_Lts_CLN_SD();
  Lts_CLN = SD.open("Lts_CLN.txt", FILE_WRITE);
  if (Lts_CLN)
  {
    lts_ACU_CLN = Lts_CLN_Totales + Litros_Agua_CLN;
    Lts_CLN.println();
    Lts_CLN.print(lts_ACU_CLN);
    Lts_CLN.print(" ");
    Lts_CLN.close();
    AguaConsumida = lts_ACU_CLN;
  }
 lts_ACU_CLN = 0;
}

void  temp_SYST() {

  sensorDS18B20_4.requestTemperatures();
  Temp_SYST_DSB = (sensorDS18B20_4.getTempCByIndex(0));
  TempSYST = Temp_SYST_DSB;


}
void  Bt_WEED() {

  if (BT_Weed.available()) {

    costoKW = BT_Weed.read();

    if (i < n) {
      for (i; i < n; i++) {
        EEPROM.put(eeAddress, costoKW);
        eeAddress += sizeof(costoKW);
        delay(pausa);
      }
    }
    EdoBT = ("Actualizado");
    ModuloBT();
  } else {
    EdoBT = ("Conectado");
  }
}
void  Espacio_Libre() {

  volume.init(card);
  uint32_t volumesize;
  volumesize = volume.blocksPerCluster();
  volumesize *= volume.clusterCount();
  volumesize /= 2;
  totalSIZE = (volumesize) / 1024.0;

  //Serial.print("Volume size (Mb):  ");
  //Serial.println(totalSIZE);
  //delay (1000);

  HIDROWEED = SD.open("HIDROWEED.txt", FILE_READ);
  if (HIDROWEED)
  {
    file1SIZE1 = HIDROWEED.size() * 0.000001;
    HIDROWEED.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE1);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE1 = 1;
    delay(pausa);
  }

  HRS = SD.open("HRS.txt", FILE_READ);
  if (HRS)
  {
    file1SIZE2 = HRS.size() * 0.000001;
    HRS.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE2);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE2 = 1;
    delay(pausa);
  }

  KWHRS = SD.open("KWHRS.txt", FILE_READ);
  if (KWHRS)
  {
    file1SIZE15 = KWHRS.size() * 0.000001;
    KWHRS.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE15);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE15 = 1;
    delay(pausa);
  }

  ETANROFLW = SD.open("ETANROFLW.txt", FILE_READ);
  if (ETANROFLW)
  {
    file1SIZE3 = ETANROFLW.size() * 0.000001;
    ETANROFLW.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE3);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE3 = 1;
    delay(pausa);
  }

  edoETAPAFLW = SD.open("edoETAPAFLW.txt", FILE_READ);
  if (edoETAPAFLW)
  {
    file1SIZE4 = edoETAPAFLW.size() * 0.000001;
    edoETAPAFLW.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE4);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE4 = 1;
    delay(pausa);
  }

  HRSFLW = SD.open("HRSFLW.txt", FILE_READ);
  if (HRSFLW)
  {
    file1SIZE5 = HRSFLW.size() * 0.000001;
    HRSFLW.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE5);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE5 = 1;
    delay(pausa);
  }

  ETANROVEG = SD.open("ETANROVEG.txt", FILE_READ);
  if (ETANROVEG)
  {
    file1SIZE6 = ETANROVEG.size() * 0.000001;
    ETANROVEG.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE6);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE6 = 1;
    delay(pausa);
  }

  edoETAPAVEG = SD.open("edoETAPAVEG.txt", FILE_READ);
  if (edoETAPAVEG)
  {
    file1SIZE7 = edoETAPAVEG.size() * 0.000001;
    edoETAPAVEG.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE7);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE7 = 1;
    delay(pausa);
  }

  HRSVEG = SD.open("HRSVEG.txt", FILE_READ);
  if (HRSVEG)
  {
    file1SIZE8 = HRSVEG.size() * 0.000001;
    HRSVEG.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE8);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE8 = 1;
    delay(pausa);
  }

  ETANROCLN = SD.open("ETANROCLN.txt", FILE_READ);
  if (ETANROCLN)
  {
    file1SIZE9 = ETANROCLN.size() * 0.000001;
    ETANROCLN.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE9);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE9 = 1;
    delay(pausa);
  }

  edoETAPACLN = SD.open("edoETAPACLN.txt", FILE_READ);
  if (edoETAPACLN)
  {
    file1SIZE10 = edoETAPACLN.size() * 0.000001;
    edoETAPACLN.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE10);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE10 = 1;
    delay(pausa);
  }

  HRSCLN = SD.open("HRSCLN.txt", FILE_READ);
  if (HRSCLN)
  {
    file1SIZE11 = HRSCLN.size() * 0.000001;
    HRSCLN.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE11);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE11 = 1;
    delay(pausa);
  }

  ETANRODRY = SD.open("ETANRODRY.txt", FILE_READ);
  if (ETANRODRY)
  {
    file1SIZE12 = ETANRODRY.size() * 0.000001;
    ETANRODRY.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE12);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE12 = 1;
    delay(pausa);
  }

  edoETAPADRY = SD.open("edoETAPADRY.txt", FILE_READ);
  if (edoETAPADRY)
  {
    file1SIZE13 = edoETAPADRY.size() * 0.000001;
    edoETAPADRY.close();
    //Serial.print("File size: ");
    //Serial.print(file1SIZE13);
    //Serial.println(" (Mb)");
  }
  else
  {
    file1SIZE13 = 1;
    delay(pausa);
  }

  HRSDRY = SD.open("HRSDRY.txt", FILE_READ);
  if (HRSDRY)
  {
    file1SIZE14 = HRSDRY.size() * 0.000001;
    HRSDRY.close();

    /*
      Serial.print("File size: ");
      Serial.print(file1SIZE14);
      Serial.println(" (Mb)");
    */
  }
  else
  {
    file1SIZE14 = 1;
    delay(pausa);
  }

  Lts_FLW = SD.open("Lts_FLW.txt", FILE_READ);
  if (Lts_FLW)
  {
    file1SIZE17 = Lts_FLW.size() * 0.000001;
    Lts_FLW.close();

    /*
      Serial.print("File size: ");
      Serial.print(file1SIZE17);
      Serial.println(" (Mb)");
    */
  }
  else
  {
    file1SIZE17 = 1;
    delay(pausa);
  }

  Lts_VEG = SD.open("Lts_VEG.txt", FILE_READ);
  if (Lts_VEG)
  {
    file1SIZE18 = Lts_VEG.size() * 0.000001;
    Lts_VEG.close();

    /*
      Serial.print("File size: ");
      Serial.print(file1SIZE18);
      Serial.println(" (Mb)");
    */
  }
  else
  {
    file1SIZE18 = 1;
    delay(pausa);
  }

  Lts_CLN = SD.open("Lts_CLN.txt", FILE_READ);
  if (Lts_CLN)
  {
    file1SIZE19 = Lts_CLN.size() * 0.000001;
    Lts_CLN.close();

    /*
      Serial.print("File size: ");
      Serial.print(file1SIZE19);
      Serial.println(" (Mb)");
    */
  }
  else
  {
    file1SIZE19 = 1;
    delay(pausa);
  }

  totalSIZES = file1SIZE1 + file1SIZE19 + file1SIZE18 + file1SIZE17 + file1SIZE2 + file1SIZE3 + file1SIZE4 + file1SIZE5 + file1SIZE6 + file1SIZE7 + file1SIZE8 + file1SIZE9 + file1SIZE10 + file1SIZE11 + file1SIZE12 + file1SIZE13 + file1SIZE14 + file1SIZE15;
  EspacioLibre = ((totalSIZE - totalSIZES) / 1024.0, DEC - 6);

  // Serial.print("Espacio libre : (Gb)  ");
  //Serial.println((totalSIZE - file1SIZE)/1024.0,DEC-6);
}

// MEDICIÓN DE CORRIENTE //
void KiloWatts_Costo() {

  DateTime now = rtc.now();
  int hrs = (now.hour());
  int mns = (now.minute());
  if (hrs == 23 && mns > 55)
  {
    Watts_MAX_diarios = 0;
  }
  double Irms = emon1.calcIrms(1480);
  unsigned long contador_Kw_2 = millis();

  corriente = Irms;
  Potencia = Irms * Voltaje_Col;
  if (Potencia > Watts_MAX_diarios){Watts_MAX_diarios = Potencia;}


if ( contador_Kw_2 - contador_Kw_1 >= 1000)
  {
  
    contador_Kw_1 = contador_Kw_2;
    
    valor_Kw_Hrs = (Potencia / 1000)/3600;
    Kw_Acumulado = Kw_Acumulado + valor_Kw_Hrs;

/*
    Serial.print (" Corriente : ");
    Serial.print (corriente);
    Serial.println (" A");
   // Serial.println ("");
  
    Serial.print (" Watts : ");
    Serial.print (Potencia);
    Serial.println (" W");
   
    Serial.print (" Kw/Seg : ");
    Serial.print (valor_Kw_Hrs,DEC);
    Serial.println (" Kw/Seg");
    
    Serial.print (" Acumulado de Kw/H : ");
    Serial.print (Kw_Acumulado,DEC);
    Serial.println (" Kw/Hrs");
    Serial.println ("");  

    
    Serial.print (" Segundos : ");
    Serial.print (millis()/1000);
    Serial.print (" |  Minutos : ");
    Serial.print (millis()/60000);
    Serial.print (" |  Horas : ");
    Serial.print (millis()/3600000);
    Serial.println ("");  */
  
  }
  

  //  Lee valor Costo EEPROM //
  if (i < n) {
    for (i; i < n; i++) {
      EEPROM.get(eeAddress, costoKW);
      eeAddress += sizeof(costoKW);
      delay(pausa);
    }
  }

  Escr_Kw_hrs_Acumulado();
  costo_TOTAL = Kw_Acumulado * costoKW;

}
void Comprobar_Kw_Acumulado(){
   
  Leer_Kw_hrs_Acumulado();
  if (Kw_Acumulado < Sd_KWHRS)
  {
    Kw_Acumulado = Kw_Acumulado + Sd_KWHRS;
  }

}

void Escr_Kw_hrs_Acumulado() { // ESCRIBE DATO de Kw_Acumulado //

  KWHRS = SD.open("KWHRS.txt", FILE_WRITE);
  if (KWHRS)
  {
    KWHRS.println();
    KWHRS.print(Kw_Acumulado,DEC);
    KWHRS.print(" ");
    KWHRS.close();
  }
}
void Leer_Kw_hrs_Acumulado() { // OBTIENE DATO KW ACUMULADO  Sd_KWHRS   //
  KWHRS = SD.open("KWHRS.txt", FILE_READ);

  if (KWHRS)
  {
    bool lineKWHRS = false;
    KWHRS.seek(KWHRS.size() - 1);

    while (KWHRS.available())
    {
      if (lineKWHRS == false)
      {
        char caracterKWHRS = KWHRS.read();
        KWHRS.seek(HRS.position() - 2);
        if (caracterKWHRS == '\n')
        {
          lineKWHRS = true;
        }
      }

      if (lineKWHRS == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterKWHRS = KWHRS.read();
        cadenaKWHRS = cadenaKWHRS + caracterKWHRS;
        if (caracterKWHRS == ' ')
        {
          break;
        }
      }
    }
    KWHRS.close();
    Sd_KWHRS = cadenaKWHRS.toFloat();

    delay(pausa);

    char root = cadena[10];
    //  Serial.print("cadena Leida: ");
    //  Serial.println(cadena);
    //  Serial.println(Sd_KWHRS);
    //   delay(pausa);

  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena = "";
}

// CICLOS //
void Cada_Hora() {

  Escr_Hrs_SD();                delay(pausa);

  Escr_edoETAPAFLW_SD();        delay(pausa);
  Escr_ETANROFLW_SD();          delay(pausa);
  Escr_HRSFLW_SD();             delay(pausa);

  Escr_edoETAPAVEG_SD();        delay(pausa);
  Escr_ETANROVEG_SD();          delay(pausa);
  Escr_HRSVEG_SD();             delay(pausa);

  Escr_edoETAPADRY_SD();        delay(pausa);
  Escr_ETANRODRY_SD();          delay(pausa);
  Escr_HRSDRY_SD();             delay(pausa);

  Escr_edoETAPACLN_SD();        delay(pausa);
  Escr_ETANROCLN_SD();          delay(pausa);
  Escr_HRSCLN_SD();             delay(pausa);

}
void Escr_Hrs_SD() {

  contador ++;

  HRS = SD.open("HRS.txt", FILE_WRITE);
  if (HRS)
  {
    HRS.println();
    HRS.print(contador);
    HRS.print(" ");
    HRS.close();
  }
}
void leer_Hrs_SD() { // OBTIENE DATO DE LA hora_actual //
  HRS = SD.open("HRS.txt", FILE_READ);

  if (HRS)
  {
    bool line = false;
    HRS.seek(HRS.size() - 1);

    while (HRS.available())
    {
      if (line == false)
      {
        char caracter = HRS.read();
        HRS.seek(HRS.position() - 2);
        if (caracter == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracter = HRS.read();
        cadena = cadena + caracter;
        if (caracter == ' ')
        {
          break;
        }
      }
    }
    HRS.close();
    hora_actual = cadena.toInt();

    delay(pausa);

    char root = cadena[10];

    //  Serial.print("cadena Leida: ");
    //  Serial.println(cadena);
    //  Serial.println(hora_actual);
    //   delay(pausa);


  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena = "";
}

void actualizar_HRS_ppal() {
  leer_Hrs_SD();
  if (hora_actual > contador) {
    contador = contador + hora_actual;
  }
}

// VACIAR STRING BT-WIFI-SD //
void Vaciar_String() {

  dato_Etapa = "";
  dato_Luz =  "";
  dato_Humedad = "";
  dato_Temperatura = "";
  dato_dpv = "";
  dato_Co2 = "";
  dato_Sonda = "";
  dato_Ec = "";
  dato_Ph = "";
  dato_DiaNumero = "";
  dato_DiasTotales = "";
  dato_TempSYST = "";
  dato_AguaConsumida = "";
  dato_A = "";
  dato_B = "";
  dato_C = "";
  dato_PhUp = "";
  dato_PhDown = "";
  dato_Kw = "";
  dato_AlturaLuz = "";
  dato_Extraccion = "";
  dato_UV = "";
  dato_Crecimiento =  "";
  dato_PotenciaLuz  = "";
  dato_EtapaNro =  "";
  dato_EspacioLibre = "";
  dato_EdoWifi = "";
  dato_EdoBT = "";
}

// GOOGLE SHEETS //
void Google_WiFi() {

  dato_EdoWifi = ("Conectado");

  String dato_Etapa = String(Etapa);
  String dato_Luz =  String(Luz);
  String dato_Humedad = String(Humedad);
  String dato_Temperatura = String(Temperatura);
  String dato_dpv = String(dpv);
  String dato_Co2 = String(Co2);
  String dato_Sonda = String(Sonda);
  String dato_Ec = String(Ec);
  String dato_Ph = String(Ph);
  String dato_DiaNumero = String(DiaNumero);
  String dato_DiasTotales = String(DiasTotales);
  String dato_TempSYST = String(TempSYST);
  String dato_AguaConsumida = String(AguaConsumida);
  String dato_A = String(Hydro_A);
  String dato_B = String(Hydro_B);
  String dato_C = String(Melesol);
  String dato_PhUp = String(PhUp);
  String dato_PhDown = String(PhDown);
  String dato_Kw = String(Kw);
  String dato_AlturaLuz = String(AlturaLuz);
  String dato_Extraccion = String(Extraccion);
  String dato_UV = String(UV);
  String dato_Crecimiento = String(Crecimiento);
  String dato_PotenciaLuz = String(PotenciaLuz);
  String dato_EtapaNro = String(EtapaNro);
  String dato_EspacioLibre = String(EspacioLibre);
  String dato_EdoWifi = String(EdoWifi);
  String dato_EdoBT = String(EdoBT);

  String url = "/exec?dato_Etapa=" + dato_Etapa + "&dato_Luz=" + dato_Luz + "&dato_Humedad=" + dato_Humedad + "&dato_Temperatura=" + Temperatura + "&dato_dpv=" + dpv + "&dato_Co2=" + Co2 + "&dato_Sonda=" + Sonda + "&dato_Ec=" + Ec + "&dato_Ph=" + Ph + "&dato_DiaNumero=" + DiaNumero + "&dato_DiasTotales=" + DiasTotales + "&dato_TempSYST=" + TempSYST + "&dato_AguaConsumida=" + AguaConsumida + "&dato_A=" + Hydro_A + "&dato_B=" + Hydro_B + "&dato_C=" + Melesol + "&dato_PhUp=" + PhUp + "&dato_PhDown=" + PhDown + "&dato_Kw=" + Kw + "&dato_AlturaLuz=" + AlturaLuz + "&dato_Extraccion=" + Extraccion + "&dato_UV=" + UV + "&dato_Crecimiento=" + Crecimiento + "&dato_PotenciaLuz=" + PotenciaLuz + "&dato_EtapaNro=" + EtapaNro + "&dato_EspacioLibre=" + EspacioLibre + "&dato_EdoWifi=" + EdoWifi + "&dato_EdoBT=" + EdoBT ;


  if (Serial.available())
  {
    WiFi_ESP8266.println(url);
  }

  delay (3000);
  WiFi_ESP8266.flush();
  Serial.flush();
  url = "";
  guardar_sd();
  Wifi_OK_Enviado();
  Vaciar_String();

}

// LECTURAS SD //

// ETAPA DE FLORACIÓN NÚMERO //
void leer_ETANROFLW_SD() {    // obtengo el valor de la sd de valor_ETANROFLW //

  ETANROFLW = SD.open("ETANROFLW.txt", FILE_READ);

  if (ETANROFLW)
  {
    bool line = false;
    ETANROFLW.seek(ETANROFLW.size() - 1);

    while (ETANROFLW.available())
    {
      if (line == false)
      {
        char caracter_nro_FLW = ETANROFLW.read();
        ETANROFLW.seek(ETANROFLW.position() - 2);
        if (caracter_nro_FLW == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracter_nro_FLW = ETANROFLW.read();
        cadena_ETANROFLW = cadena_ETANROFLW + caracter_nro_FLW;
        if (caracter_nro_FLW == ' ')
        {
          break;
        }
      }
    }
    ETANROFLW.close();
    valor_ETANROFLW = cadena_ETANROFLW.toInt();
    dato_DiaNumero = valor_ETANROFLW;

    delay(pausa);

    char root = cadena_ETANROFLW[10];
    //  Serial.print("cadena_ETANROFLW Leida: ");
    //  Serial.println(valor_ETANROFLW);
    //  Serial.println(valor_ETANROFLW);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_ETANROFLW = "";
}
void Escr_ETANROFLW_SD() {    // escribo el valor de la sd de contFLW         //

  ETANROFLW = SD.open("ETANROFLW.txt", FILE_WRITE);
  if (ETANROFLW)
  {
    ETANROFLW.println();
    ETANROFLW.print(contFLW);
    ETANROFLW.print(" ");
    ETANROFLW.close();
  }
}

// ESTADO ETAPA FLW //
void leer_edoETAPAFLW_SD() {  // obtengo el valor de la sd de edo_ETAPAFLW //

  edoETAPAFLW = SD.open("edoETAPAFLW.txt", FILE_READ);

  if (edoETAPAFLW)
  {
    bool line = false;
    edoETAPAFLW.seek(edoETAPAFLW.size() - 1);

    while (edoETAPAFLW.available())
    {
      if (line == false)
      {
        char caracterFLWedo = edoETAPAFLW.read();
        edoETAPAFLW.seek(edoETAPAFLW.position() - 2);
        if (caracterFLWedo == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterFLWedo = edoETAPAFLW.read();
        cadena_EDO_FLW = cadena_EDO_FLW + caracterFLWedo;
        if (caracterFLWedo == ' ')
        {
          break;
        }
      }
    }
    edoETAPAFLW.close();
    edo_ETAPAFLW = cadena_EDO_FLW.toInt();

    delay(pausa);

    char root = cadena_EDO_FLW[10];
    //  Serial.print("cadena_EDO_FLW Leida: ");
    //  Serial.println(cadena_EDO_FLW);
    //  Serial.println(edo_ETAPAFLW);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_EDO_FLW = "";

  // devuelve el valor de edo_ETAPAFLW //
}
void Escr_edoETAPAFLW_SD() {  // escribo el valor de la sd de edo_eta_FLW //

  edoETAPAFLW = SD.open("edoETAPAFLW.txt", FILE_WRITE);
  if (edoETAPAFLW)
  {
    edoETAPAFLW.println();
    edoETAPAFLW.print(ledStateFLW);
    edoETAPAFLW.print(" ");
    edoETAPAFLW.close();
  }

}

// HORAS DE FLW //
void leer_HRSFLW_SD() {       // obtengo el valor de la sd de hora_actualFLW //

  HRSFLW = SD.open("HRSFLW.txt", FILE_READ);

  if (HRSFLW)
  {
    bool line = false;
    HRSFLW.seek(HRSFLW.size() - 1);

    while (HRSFLW.available())
    {
      if (line == false)
      {
        char caracterFLWhrs = HRSFLW.read();
        HRSFLW.seek(HRSFLW.position() - 2);
        if (caracterFLWhrs == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterFLWhrs = HRSFLW.read();
        cadena_HRSFLW = cadena_HRSFLW + caracterFLWhrs;
        if (caracterFLWhrs == ' ')
        {
          break;
        }
      }
    }
    HRSFLW.close();
    hora_actualFLW = cadena_HRSFLW.toInt();

    delay(pausa);

    char root = cadena_HRSFLW[10];
    //  Serial.print("cadena_HRSFLW Leida: ");
    //  Serial.println(cadena_HRSFLW);
    //  Serial.println(hora_actualFLW);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_HRSFLW = "";

  // devuelve el valor de hora_actualFLW //
}
void Escr_HRSFLW_SD() {       // escribo el valor de la sd de cont_actualFLW //

  cont_hrs_FLW ++;

  HRSFLW = SD.open("HRSFLW.txt", FILE_WRITE);
  if (HRSFLW)
  {
    HRSFLW.println();
    HRSFLW.print(cont_hrs_FLW);
    HRSFLW.print(" ");
    HRSFLW.close();
  }

}

// CONTADORES DE TIEMPO Y SD //
void Revisar_Contadores_FLW () {

  leer_ETANROFLW_SD();
  leer_edoETAPAFLW_SD();
  leer_HRSFLW_SD();

  if (contFLW < 1 && cont_hrs_FLW > 0)
  {
    contFLW = valor_ETANROFLW;
  }
  if (!ledStateFLW == edo_ETAPAFLW)
  {
    ledStateFLW = edo_ETAPAFLW;
  }
  if (!cont_hrs_FLW == hora_actualFLW)
  {
    cont_hrs_FLW = hora_actualFLW;
  }
}

// ETAPA VEG NÚMERO //
void leer_ETANROVEG_SD() {    // obtengo el valor de la sd de valor_ETANROVEG //

  ETANROVEG = SD.open("ETANROVEG.txt", FILE_READ);

  if (ETANROVEG)
  {
    bool line = false;
    ETANROVEG.seek(ETANROVEG.size() - 1);

    while (ETANROVEG.available())
    {
      if (line == false)
      {
        char caracter_nro_VEG = ETANROVEG.read();
        ETANROVEG.seek(ETANROVEG.position() - 2);
        if (caracter_nro_VEG == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracter_nro_VEG = ETANROVEG.read();
        cadena_ETANROVEG = cadena_ETANROVEG + caracter_nro_VEG;
        if (caracter_nro_VEG == ' ')
        {
          break;
        }
      }
    }
    ETANROVEG.close();
    valor_ETANROVEG = cadena_ETANROVEG.toInt();
    dato_DiaNumero = valor_ETANROVEG;

    delay(pausa);

    char root = cadena_ETANROVEG[10];
    //  Serial.print("cadena_ETANROVEG Leida: ");
    //  Serial.println(valor_ETANROVEG);
    //  Serial.println(valor_ETANROVEG);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_ETANROVEG = "";
}
void Escr_ETANROVEG_SD() {    // escribo el valor de la sd de contVEG         //

  ETANROVEG = SD.open("ETANROVEG.txt", FILE_WRITE);
  if (ETANROVEG)
  {
    ETANROVEG.println();
    ETANROVEG.print(contVEG);
    ETANROVEG.print(" ");
    ETANROVEG.close();
  }
}

// ESTADO ETAPA VEG //
void leer_edoETAPAVEG_SD() {  // obtengo el valor de la sd de edo_ETAPAVEG //

  edoETAPAVEG = SD.open("edoETAPAVEG.txt", FILE_READ);

  if (edoETAPAVEG)
  {
    bool line = false;
    edoETAPAVEG.seek(edoETAPAVEG.size() - 1);

    while (edoETAPAVEG.available())
    {
      if (line == false)
      {
        char caracterVEGedo = edoETAPAVEG.read();
        edoETAPAVEG.seek(edoETAPAVEG.position() - 2);
        if (caracterVEGedo == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterVEGedo = edoETAPAVEG.read();
        cadena_EDO_VEG = cadena_EDO_VEG + caracterVEGedo;
        if (caracterVEGedo == ' ')
        {
          break;
        }
      }
    }
    edoETAPAVEG.close();
    edo_ETAPAVEG = cadena_EDO_VEG.toInt();

    delay(pausa);

    char root = cadena_EDO_VEG[10];
    //  Serial.print("cadena_EDO_VEG Leida: ");
    //  Serial.println(cadena_EDO_VEG);
    //  Serial.println(edo_ETAPAVEG);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_EDO_VEG = "";

  // devuelve el valor de edo_ETAPAVEG //
}
void Escr_edoETAPAVEG_SD() {  // escribo el valor de la sd de edo_eta_VEG //

  edoETAPAVEG = SD.open("edoETAPAVEG.txt", FILE_WRITE);
  if (edoETAPAVEG)
  {
    edoETAPAVEG.println();
    edoETAPAVEG.print(ledStateVEG);
    edoETAPAVEG.print(" ");
    edoETAPAVEG.close();
  }
}

// HORAS DE VEG //
void leer_HRSVEG_SD() {       // obtengo el valor de la sd de hora_actualVEG //

  HRSVEG = SD.open("HRSVEG.txt", FILE_READ);

  if (HRSVEG)
  {
    bool line = false;
    HRSVEG.seek(HRSVEG.size() - 1);

    while (HRSVEG.available())
    {
      if (line == false)
      {
        char caracterVEGhrs = HRSVEG.read();
        HRSVEG.seek(HRSVEG.position() - 2);
        if (caracterVEGhrs == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterVEGhrs = HRSVEG.read();
        cadena_HRSVEG = cadena_HRSVEG + caracterVEGhrs;
        if (caracterVEGhrs == ' ')
        {
          break;
        }
      }
    }
    HRSVEG.close();
    hora_actualVEG = cadena_HRSVEG.toInt();

    delay(pausa);

    char root = cadena_HRSVEG[10];
    //  Serial.print("cadena_HRSVEG Leida: ");
    //  Serial.println(cadena_HRSVEG);
    //  Serial.println(hora_actualVEG);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_HRSVEG = "";

  // devuelve el valor de hora_actualVEG //
}
void Escr_HRSVEG_SD() {       // escribo el valor de la sd de cont_actualVEG //

  cont_hrs_VEG ++;

  HRSVEG = SD.open("HRSVEG.txt", FILE_WRITE);
  if (HRSVEG)
  {
    HRSVEG.println();
    HRSVEG.print(cont_hrs_VEG);
    HRSVEG.print(" ");
    HRSVEG.close();
  }
}

// CONTADORES DE TIEMPO Y SD //
void Revisar_Contadores_VEG () {

  leer_ETANROVEG_SD();
  leer_edoETAPAVEG_SD();
  leer_HRSVEG_SD();

  if (contVEG < 1 && cont_hrs_VEG > 0)
  {
    contVEG = valor_ETANROVEG;
  }
  else if (!ledStateVEG == edo_ETAPAVEG)
  {
    ledStateVEG = edo_ETAPAVEG;
  }
  else if (!cont_hrs_VEG == hora_actualVEG)
  {
    cont_hrs_VEG = hora_actualVEG;
  }
}

// ETAPA CLN NÚMERO //
void leer_ETANROCLN_SD() {    // obtengo el valor de la sd de valor_ETANROCLN //

  ETANROCLN = SD.open("ETANROCLN.txt", FILE_READ);

  if (ETANROCLN)
  {
    bool line = false;
    ETANROCLN.seek(ETANROCLN.size() - 1);

    while (ETANROCLN.available())
    {
      if (line == false)
      {
        char caracter_nro_CLN = ETANROCLN.read();
        ETANROCLN.seek(ETANROCLN.position() - 2);
        if (caracter_nro_CLN == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracter_nro_CLN = ETANROCLN.read();
        cadena_ETANROCLN = cadena_ETANROCLN + caracter_nro_CLN;
        if (caracter_nro_CLN == ' ')
        {
          break;
        }
      }
    }
    ETANROCLN.close();
    valor_ETANROCLN = cadena_ETANROCLN.toInt();
    dato_DiaNumero = valor_ETANROCLN;

    delay(pausa);

    char root = cadena_ETANROCLN[10];
    //  Serial.print("cadena_ETANROCLN Leida: ");
    //  Serial.println(valor_ETANROCLN);
    //  Serial.println(valor_ETANROCLN);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_ETANROCLN = "";
}
void Escr_ETANROCLN_SD() {    // escribo el valor de la sd de contCLN         //

  ETANROCLN = SD.open("ETANROCLN.txt", FILE_WRITE);
  if (ETANROCLN)
  {
    ETANROCLN.println();
    ETANROCLN.print(contCLN);
    ETANROCLN.print(" ");
    ETANROCLN.close();
  }
}

// ESTADO ETAPA CLN //
void leer_edoETAPACLN_SD() {  // obtengo el valor de la sd de edo_ETAPACLN //

  edoETAPACLN = SD.open("edoETAPACLN.txt", FILE_READ);

  if (edoETAPACLN)
  {
    bool line = false;
    edoETAPACLN.seek(edoETAPACLN.size() - 1);

    while (edoETAPACLN.available())
    {
      if (line == false)
      {
        char caracterCLNedo = edoETAPACLN.read();
        edoETAPACLN.seek(edoETAPACLN.position() - 2);
        if (caracterCLNedo == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterCLNedo = edoETAPACLN.read();
        cadena_EDO_CLN = cadena_EDO_CLN + caracterCLNedo;
        if (caracterCLNedo == ' ')
        {
          break;
        }
      }
    }
    edoETAPACLN.close();
    edo_ETAPACLN = cadena_EDO_CLN.toInt();

    delay(pausa);

    char root = cadena_EDO_CLN[10];
    //  Serial.print("cadena_EDO_CLN Leida: ");
    //  Serial.println(cadena_EDO_CLN);
    //  Serial.println(edo_ETAPACLN);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_EDO_CLN = "";

  // devuelve el valor de edo_ETAPACLN //
}
void Escr_edoETAPACLN_SD() {  // escribo el valor de la sd de edo_eta_CLN //

  edoETAPACLN = SD.open("edoETAPACLN.txt", FILE_WRITE);
  if (edoETAPACLN)
  {
    edoETAPACLN.println();
    edoETAPACLN.print(ledStateCLN);
    edoETAPACLN.print(" ");
    edoETAPACLN.close();
  }
}

// HORAS DE CLN ETAPA //
void leer_HRSCLN_SD() {       // obtengo el valor de la sd de hora_actualCLN //

  HRSCLN = SD.open("HRSCLN.txt", FILE_READ);

  if (HRSCLN)
  {
    bool line = false;
    HRSCLN.seek(HRSCLN.size() - 1);

    while (HRSCLN.available())
    {
      if (line == false)
      {
        char caracterCLNhrs = HRSCLN.read();
        HRSCLN.seek(HRSCLN.position() - 2);
        if (caracterCLNhrs == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterCLNhrs = HRSCLN.read();
        cadena_HRSCLN = cadena_HRSCLN + caracterCLNhrs;
        if (caracterCLNhrs == ' ')
        {
          break;
        }
      }
    }
    HRSCLN.close();
    hora_actualCLN = cadena_HRSCLN.toInt();

    delay(pausa);

    char root = cadena_HRSCLN[10];
    //  Serial.print("cadena_HRSCLN Leida: ");
    //  Serial.println(cadena_HRSCLN);
    //  Serial.println(hora_actualCLN);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_HRSCLN = "";

  // devuelve el valor de hora_actualCLN //
}
void Escr_HRSCLN_SD() {       // escribo el valor de la sd de cont_actualCLN //

  cont_hrs_CLN ++;

  HRSCLN = SD.open("HRSCLN.txt", FILE_WRITE);
  if (HRSCLN)
  {
    HRSCLN.println();
    HRSCLN.print(cont_hrs_CLN);
    HRSCLN.print(" ");
    HRSCLN.close();
  }
}

// CONTADORES DE TIEMPO Y SD //
void Revisar_Contadores_CLN () {

  leer_ETANROCLN_SD();
  leer_edoETAPACLN_SD();
  leer_HRSCLN_SD();

  if (contCLN < 1 && cont_hrs_CLN > 0)
  {
    contCLN = valor_ETANROCLN;
  }
  else if (!ledStateCLN == edo_ETAPACLN)
  {
    ledStateCLN = edo_ETAPACLN;
  }
  else if (!cont_hrs_CLN == hora_actualCLN)
  {
    cont_hrs_CLN = hora_actualCLN;
  }
}

// ETAPA DRY NÚMERO //
void leer_ETANRODRY_SD() {    // obtengo el valor de la sd de valor_ETANRODRY //

  ETANRODRY = SD.open("ETANRODRY.txt", FILE_READ);

  if (ETANRODRY)
  {
    bool line = false;
    ETANRODRY.seek(ETANRODRY.size() - 1);

    while (ETANRODRY.available())
    {
      if (line == false)
      {
        char caracter_nro_DRY = ETANRODRY.read();
        ETANRODRY.seek(ETANRODRY.position() - 2);
        if (caracter_nro_DRY == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracter_nro_DRY = ETANRODRY.read();
        cadena_ETANRODRY = cadena_ETANRODRY + caracter_nro_DRY;
        if (caracter_nro_DRY == ' ')
        {
          break;
        }
      }
    }
    ETANRODRY.close();
    valor_ETANRODRY = cadena_ETANRODRY.toInt();
    dato_DiaNumero = valor_ETANRODRY;

    delay(pausa);

    char root = cadena_ETANRODRY[10];
    //  Serial.print("cadena_ETANRODRY Leida: ");
    //  Serial.println(valor_ETANRODRY);
    //  Serial.println(valor_ETANRODRY);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_ETANRODRY = "";
}
void Escr_ETANRODRY_SD() {    // escribo el valor de la sd de contDRY         //

  ETANRODRY = SD.open("ETANRODRY.txt", FILE_WRITE);
  if (ETANRODRY)
  {
    ETANRODRY.println();
    ETANRODRY.print(contDRY);
    ETANRODRY.print(" ");
    ETANRODRY.close();
  }
}

// ESTADO ETAPA DRY //
void leer_edoETAPADRY_SD() {  // obtengo el valor de la sd de edo_ETAPADRY //

  edoETAPADRY = SD.open("edoETAPADRY.txt", FILE_READ);

  if (edoETAPADRY)
  {
    bool line = false;
    edoETAPADRY.seek(edoETAPADRY.size() - 1);

    while (edoETAPADRY.available())
    {
      if (line == false)
      {
        char caracterDRYedo = edoETAPADRY.read();
        edoETAPADRY.seek(edoETAPADRY.position() - 2);
        if (caracterDRYedo == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterDRYedo = edoETAPADRY.read();
        cadena_EDO_DRY = cadena_EDO_DRY + caracterDRYedo;
        if (caracterDRYedo == ' ')
        {
          break;
        }
      }
    }
    edoETAPADRY.close();
    edo_ETAPADRY = cadena_EDO_DRY.toInt();

    delay(pausa);

    char root = cadena_EDO_DRY[10];
    //  Serial.print("cadena_EDO_DRY Leida: ");
    //  Serial.println(cadena_EDO_DRY);
    //  Serial.println(edo_ETAPADRY);
    //   delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_EDO_DRY = "";

  // devuelve el valor de edo_ETAPADRY //
}
void Escr_edoETAPADRY_SD() {  // escribo el valor de la sd de edo_eta_DRY //

  edoETAPADRY = SD.open("edoETAPADRY.txt", FILE_WRITE);
  if (edoETAPADRY)
  {
    edoETAPADRY.println();
    edoETAPADRY.print(ledStateDRY);
    edoETAPADRY.print(" ");
    edoETAPADRY.close();
  }
}

// HORAS DE DRY  ETAPA //
void leer_HRSDRY_SD() {       // obtengo el valor de la sd de hora_actualDRY //

  HRSDRY = SD.open("HRSDRY.txt", FILE_READ);

  if (HRSDRY)
  {
    bool line = false;
    HRSDRY.seek(HRSDRY.size() - 1);

    while (HRSDRY.available())
    {
      if (line == false)
      {
        char caracterDRYhrs = HRSDRY.read();
        HRSDRY.seek(HRSDRY.position() - 2);
        if (caracterDRYhrs == '\n')
        {
          line = true;
        }
      }

      if (line == true) //Empieza a leer normalmente de izquierda a derecha
      {
        char caracterDRYhrs = HRSDRY.read();
        cadena_HRSDRY = cadena_HRSDRY + caracterDRYhrs;
        if (caracterDRYhrs == ' ')
        {
          break;
        }
      }
    }
    HRSDRY.close();
    hora_actualDRY = cadena_HRSDRY.toInt();

    delay(pausa);

    char root = cadena_HRSDRY[10];
    //  Serial.print("cadena_HRSDRY Leida: ");
    //  Serial.println(cadena_HRSDRY);
    //  Serial.println(hora_actualDRY);
    //  delay(pausa);
  }
  else
  {
    //Serial.println("Error al abrir el archivo");
  }

  cadena_HRSDRY = "";

  // devuelve el valor de hora_actualDRY //
}
void Escr_HRSDRY_SD() {       // escribo el valor de la sd de cont_actualDRY //

  cont_hrs_DRY ++;

  HRSDRY = SD.open("HRSDRY.txt", FILE_WRITE);
  if (HRSDRY)
  {
    HRSDRY.println();
    HRSDRY.print(cont_hrs_DRY);
    HRSDRY.print(" ");
    HRSDRY.close();
  }
}

// CONTADORES DE TIEMPO Y SD //
void Revisar_Contadores_DRY () {

  leer_ETANRODRY_SD();
  leer_edoETAPADRY_SD();
  leer_HRSDRY_SD();

  if (contDRY < 1 && cont_hrs_DRY > 0)
  {
    contDRY = valor_ETANRODRY;
  }
  else if (!ledStateDRY == edo_ETAPADRY)
  {
    ledStateDRY = edo_ETAPADRY;
  }
  else if (!cont_hrs_DRY == hora_actualDRY)
  {
    cont_hrs_DRY = hora_actualDRY;
  }
}

// FOTOPERIODOS //
void   Fotoperiodo_FLW() {

  DateTime now = rtc.now();
  int hora = (now.hour());
  if (hora > 5 && hora < 19)
  {
    digitalWrite(Luz_FLW, HIGH);
  }
  else
  {
    digitalWrite(Luz_FLW, LOW);
  }

}
void   Fotoperiodo_VEG() {

  DateTime now = rtc.now();
  int hora = (now.hour());
  int minuto = (now.minute());
  int segundo = (now.second());

  if (hora > 4 && hora < 22)
  {
    digitalWrite(Luz_VEG, HIGH);
  }
  else
  {
    digitalWrite(Luz_VEG, LOW);
  }

}
void   Fotoperiodo_CLN() {

  if (nivel_CLN == HIGH)
  {
    digitalWrite(Circula_CLN, HIGH);
  }
  else
  {
    digitalWrite(Circula_CLN, LOW);
  }
}

// TABLERO PPAL //
void Tablero_PPAL() {

  DateTime now = rtc.now();
  Cada_Hora();
  Oxi_Co2();
  Extract_110vAC();

  DashBoard();
  Logo_HidroWeed_OLED();
  Cannabis_HOJA();

  Mezclador_Sol();
  KiloWatts_Costo();

}
void Oxi_Co2() {

  if (ledStateFLW == 1 || ledStateVEG == 1 || ledStateCLN == 1 || ledStateDRY == 1)
  {
    unsigned long currentMillis_O2 = millis();
    if (currentMillis_O2 - previousMillis_O2 >= O2_On) {
      previousMillis_O2 = currentMillis_O2;

      if (Oxigenador == LOW) {
        Oxigenador = HIGH;
      } else {
        Oxigenador = LOW;
      }
      pcf8574_2.digitalWrite(oxigeno, Oxigenador);
    }
  }
}
void Extract_110vAC() {

  if (ledStateFLW == 1 || ledStateVEG == 1)
  {
    DateTime now = rtc.now();
    int hora = (now.hour());
    int minuto = (now.minute());
    int segundo = (now.second());
    if (hora < 2 && hora > 3) {
      digitalWrite (Vent_Extraccion, HIGH);
    } else {
      digitalWrite (Vent_Extraccion, LOW);
    }
  }
}
void Mezclador_Sol() {

  if  (edo_hydroA_FLW == 1 || edo_hydroB_FLW == 1 || edo_hydroC_FLW == 1 || edo_Dw_FLW == 1 || edo_Up_FLW == 1)
  {
    tf_mixer_Suma = millis();

    if (tf_mixer_Suma - ti_mixer_Suma >= tT_mixer_Suma )
    {
      ti_mixer_Suma = tf_mixer_Suma;
      digitalWrite(Circula_FLW, LOW);

      if (digitalRead(Mixer) == LOW)
      {
        pcf8574_2.digitalWrite(Mixer, HIGH);
      }
      else
      {
        pcf8574_2.digitalWrite(Mixer, LOW);
      }
    }
  }

  if  (edo_hydroA_VEG == 1 || edo_hydroB_VEG == 1 || edo_hydroC_VEG == 1 || edo_Dw_VEG == 1 || edo_Up_VEG == 1 )
  {
    tf_mixer_Suma = millis();

    if (tf_mixer_Suma - ti_mixer_Suma >= tT_mixer_Suma )
    {
      ti_mixer_Suma = tf_mixer_Suma;
      digitalWrite(Circula_VEG, LOW);

      if (digitalRead(Mixer) == LOW)
      {
        pcf8574_2.digitalWrite(Mixer, HIGH);
      }
      else
      {
        pcf8574_2.digitalWrite(Mixer, LOW);
      }
    }
  }

  if  (edo_hydroA_FLW == 0 || edo_hydroB_FLW == 0 || edo_hydroC_FLW == 0 || edo_Up_FLW == 0 || edo_Dw_FLW == 0 || edo_hydroA_VEG == 0 || edo_hydroB_VEG == 0 || edo_hydroC_VEG == 0 || edo_Dw_VEG == 0 || edo_Up_VEG == 0 )
  {
    unsigned long MixeState_F = millis();

    if (MixeState_F - MixeState_I >= mezcla)
    {
      MixeState_I = MixeState_F;

      if (MixeState == LOW)
      {
        MixeState = HIGH;
      }
      else
      {
        MixeState = LOW;
      }
      pcf8574_2.digitalWrite(Mixer, MixeState);
    }
  }
}

//OLED//
void ModuloBT() {

  display1.clearDisplay();
  display1.drawBitmap(0, 0, M_BT, ANCHO, ALTO, 1);
  display1.display();
  display1.setTextSize(1);
  display1.setTextColor(WHITE);
  display1.setCursor(60, 6);
  display1.println("Bluetooth:");
  display1.display();
  display1.setTextSize(1);
  display1.setTextColor(WHITE);
  display1.setCursor(58, 24);
  display1.println("Enviando...");
  display1.display();
  display1.setTextSize(2);
  display1.setCursor(64, 40);
  display1.println("Ok!");
  display1.display();
  delay(pausa);
  display1.clearDisplay();
}
void Cannabis_HOJA() {

  unsigned long Tiempo_Actual_HOJA = millis();

  if (Tiempo_Actual_HOJA - Tiempo_Previo_HOJA >= intervalo_HOJA) {

    Tiempo_Previo_HOJA = Tiempo_Actual_HOJA;
    display1.clearDisplay();
    display1.drawBitmap(0, 0, LOGCANN, ANCHO, ALTO, 1);
    display1.display();
    delay(1000);
    display1.clearDisplay();

  }
}
void Logo_HidroWeed_OLED() {

  unsigned long Tiempo_Actual_LOGO = millis();

  if (Tiempo_Actual_LOGO - Tiempo_Previo_LOGO >= intervalo_LOGO) // INTERVALO 28650 //

  {
    Tiempo_Previo_LOGO = Tiempo_Actual_LOGO;

    display1.clearDisplay();
    display1.drawBitmap(0, 0, HIDROPONIA, ANCHO, ALTO, 1);
    display1.display();
    display1.invertDisplay(true);
    delay(pausa);
    display1.invertDisplay(false);
    delay(pausa);
    display1.invertDisplay(true);
    delay(pausa);
    display1.invertDisplay(false);
    delay(pausa);
    display1.invertDisplay(true);
    delay(pausa);
    display1.invertDisplay(false);
    delay(pausa);
    display1.clearDisplay();
  }
}
void DashBoard() {

  if (Loop_WIFI == 100 )Loop_WIFI = 0;
  unsigned long Tiempo_Actual_OLED = millis();

  if (Tiempo_Actual_OLED - Tiempo_Previo_OLED >= intervalo_Oled) {
    Tiempo_Previo_OLED = Tiempo_Actual_OLED;

    display1.display();
    display1.clearDisplay();

    Loop_WIFI ++;

    display1.drawLine(0, 8, 128, 8, WHITE);
    display1.drawLine(48, 36, 128, 36, WHITE);
    display1.drawLine(48, 12, 48, 36, WHITE);

    // HORA//
    display1.setTextSize(1);
    display1.setTextColor(WHITE);
    display1.setCursor(80, 0);
    display1.setTextColor(WHITE);
    display1.print(dato_Hora);

    /*if (hora < 10)   display1.print("0");
      display1.print(hora);
      display1.print(":");
      if (min < 10)   display1.print("0");
      display1.print(min);
      display1.print(":");
      if (seg < 10)   display1.print("0");
      display1.println(seg);*/

    //ESPACIO LIBRE //
    display1.setTextSize(1);
    display1.setCursor(8, 0);
    display1.setTextColor(WHITE);
    if (EspacioLibre < 10)   display1.print("0");
    display1.print(EspacioLibre * 1.0, DEC - 9);
    display1.print(" Gb");

    // Kw-Hrs. //
    display1.setTextSize(1);
    display1.setCursor(74, 10);
    display1.setTextColor(WHITE);
    if (Sd_KWHRS < 10)   display1.print("0");
    display1.print(Sd_KWHRS * 1.0, DEC - 9);

    // TEMP SYST //
    display1.setTextSize(2);
    display1.setCursor(24, 13);
    display1.setTextColor(WHITE);
    if (Temp_SYST_DSB < 10)   display1.print("0");
    display1.print(Temp_SYST_DSB);

    // PRECIO TOTAL //
    display1.setTextSize(2);
    display1.setCursor(67, 19);
    display1.setTextColor(WHITE);
    if (costo_TOTAL < 10)   display1.print("0");
    display1.print(costo_TOTAL * 1000);

    // TEXTOS KW Y SYST //
    display1.setTextSize(1);
    display1.setCursor(104, 10);
    display1.setTextColor(WHITE);
    display1.print("Kw/h");
    display1.setTextSize(1);
    display1.setCursor(23, 28);
    display1.setTextColor(WHITE);
    display1.print("Syst");

    display1.drawBitmap(0, 0, myBitmapSD, 6, 7, 1);
    display1.drawBitmap(53, 0, myBitmapBT, 5, 7, 1);

    if (Loop_WIFI >= 0 && Loop_WIFI < 10)display1.drawBitmap(62, 1, myBitmapwifi4, 12, 6, 1);
    if (Loop_WIFI >= 10 && Loop_WIFI < 20)display1.drawBitmap(62, 1, myBitmapwifi3, 12, 6, 1);
    if (Loop_WIFI >= 20 && Loop_WIFI < 30)display1.drawBitmap(62, 1, myBitmapwifi2, 12, 6, 1);
    if (Loop_WIFI >= 30 && Loop_WIFI < 50)display1.drawBitmap(62, 1, myBitmapwifi, 12, 6, 1);

    if (Temp_SYST_DSB >= 0 && Temp_SYST_DSB < 7)display1.drawBitmap(0, 10, myBitmapapagado, 22, 29, 1);
    if (Temp_SYST_DSB >= 7 && Temp_SYST_DSB < 14)display1.drawBitmap(0, 10, myBitmaptem1, 22, 29, 1);
    if (Temp_SYST_DSB >= 14 && Temp_SYST_DSB < 21)display1.drawBitmap(0, 10, myBitmaptem2, 22, 29, 1);
    if (Temp_SYST_DSB >= 21 && Temp_SYST_DSB < 28)display1.drawBitmap(0, 10, myBitmaptem3, 22, 29, 1);
    if (Temp_SYST_DSB >= 28 && Temp_SYST_DSB < 35)display1.drawBitmap(0, 10, myBitmaptem4, 22, 29, 1);
    if (Temp_SYST_DSB >= 35 && Temp_SYST_DSB < 42)display1.drawBitmap(0, 10, myBitmaptem5, 22, 29, 1);
    if (Temp_SYST_DSB >= 42 && Temp_SYST_DSB < 51)display1.drawBitmap(0, 10, myBitmaptem6, 22, 29, 1);

      if (Lts_FLW_Totales >= tope_AGUA_FLW){tope_AGUA_FLW = tope_AGUA_FLW+100;}

    if (Lts_FLW_Totales >= 0 && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*1))display1.drawBitmap(4, 39, myBitmapvacio_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*1) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*2))display1.drawBitmap(4, 39, myBitmapagua1_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*2) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*3))display1.drawBitmap(4, 39, myBitmapagua2_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*3) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*4))display1.drawBitmap(4, 39, myBitmapagua3_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*4) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*5))display1.drawBitmap(4, 39, myBitmapagua4_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*5) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*6))display1.drawBitmap(4, 39, myBitmapagua5_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*6) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*7))display1.drawBitmap(4, 39, myBitmapagua6_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*7) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*8))display1.drawBitmap(4, 39, myBitmapagua7_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*8) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*9))display1.drawBitmap(4, 39, myBitmapagua8_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*9) && Lts_FLW_Totales < ((tope_AGUA_FLW/11)*10))display1.drawBitmap(4, 39, myBitmapagua9_F, 29, 27, 1);
    if (Lts_FLW_Totales >= ((tope_AGUA_FLW/11)*10) && Lts_FLW_Totales < tope_AGUA_FLW)display1.drawBitmap(4, 39, myBitmapagua10_F, 29, 27, 1);

      if (Lts_VEG_Totales >= tope_AGUA_VEG){tope_AGUA_FLW = tope_AGUA_FLW+100;}

    if (Lts_VEG_Totales >= 0 && Litros_Agua_VEG < ((tope_AGUA_VEG/11)*1))display1.drawBitmap(36, 39, myBitmapvacio_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*1) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*2))display1.drawBitmap(36, 39, myBitmapagua1_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*2) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*3))display1.drawBitmap(36, 39, myBitmapagua2_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*3) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*4))display1.drawBitmap(36, 39, myBitmapagua3_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*4) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*5))display1.drawBitmap(36, 39, myBitmapagua4_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*5) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*6))display1.drawBitmap(36, 39, myBitmapagua5_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*6) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*7))display1.drawBitmap(36, 39, myBitmapagua6_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*7) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*8))display1.drawBitmap(36, 39, myBitmapagua7_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*8) && Lts_VEG_Totales < ((tope_AGUA_VEG/11)*9))display1.drawBitmap(36, 39, myBitmapagua8_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*9) && Lts_VEG_Totales < 45)display1.drawBitmap(36, 39, myBitmapagua9_V, 29, 27, 1);
    if (Lts_VEG_Totales >= ((tope_AGUA_VEG/11)*10) && Lts_VEG_Totales < tope_AGUA_VEG)display1.drawBitmap(36, 39, myBitmapagua10_V, 29, 27, 1);

      if (Lts_CLN_Totales >= tope_AGUA_CLN){tope_AGUA_FLW = tope_AGUA_CLN+30;}
  
    if (Litros_Agua_CLN >= 0 && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*1))display1.drawBitmap(66, 39, myBitmapvacio_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*1) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*2))display1.drawBitmap(66, 39, myBitmapagua1_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*2) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*3))display1.drawBitmap(66, 39, myBitmapagua2_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*3) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*4))display1.drawBitmap(66, 39, myBitmapagua3_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*4) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*5))display1.drawBitmap(66, 39, myBitmapagua4_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*5) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*6))display1.drawBitmap(66, 39, myBitmapagua5_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*6) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*7))display1.drawBitmap(66, 39, myBitmapagua6_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*7) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*8))display1.drawBitmap(66, 39, myBitmapagua7_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*8) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*9))display1.drawBitmap(66, 39, myBitmapagua8_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*9) && Litros_Agua_CLN < ((tope_AGUA_CLN/11)*10))display1.drawBitmap(66, 39, myBitmapagua9_C, 29, 27, 1);
    if (Litros_Agua_CLN >= ((tope_AGUA_CLN/11)*10) && Litros_Agua_CLN < tope_AGUA_CLN)display1.drawBitmap(66, 39, myBitmapagua10_C, 29, 27, 1);

    if (Extraccion == 0){display1.drawBitmap(100, 39, myBitmap36, 26, 26, 1);}
      else
      {  
      if (Loop_WIFI >= 0 && Loop_WIFI < 5)display1.drawBitmap(100, 39, myBitmap36, 26, 26, 1);
      if (Loop_WIFI >= 5 && Loop_WIFI < 10)display1.drawBitmap(100, 39, myBitmap72, 26, 26, 1);
      if (Loop_WIFI >= 10 && Loop_WIFI < 15)display1.drawBitmap(100, 39, myBitmap108, 26, 26, 1);
      if (Loop_WIFI >= 15 && Loop_WIFI < 20)display1.drawBitmap(100, 39, myBitmap144, 26, 26, 1);
      if (Loop_WIFI >= 20 && Loop_WIFI < 25)display1.drawBitmap(100, 39, myBitmap180, 26, 26, 1);
      if (Loop_WIFI >= 25 && Loop_WIFI < 30)display1.drawBitmap(100, 39, myBitmap216, 26, 26, 1);
      if (Loop_WIFI >= 30 && Loop_WIFI < 35)display1.drawBitmap(100, 39, myBitmap252, 26, 26, 1);
      if (Loop_WIFI >= 35 && Loop_WIFI < 40)display1.drawBitmap(100, 39, myBitmap288, 26, 26, 1);
      if (Loop_WIFI >= 40 && Loop_WIFI < 45)display1.drawBitmap(100, 39, myBitmap324, 26, 26, 1);
      if (Loop_WIFI >= 45 && Loop_WIFI < 51)display1.drawBitmap(100, 39, myBitmap360, 26, 26, 1);
      }
      
    if (Potencia >= 0 && Potencia < (((Watts_MAX_diarios/9)*1)))display1.drawBitmap(50, 10, myBitmapPower_Level8, 23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*1) && Potencia < ((Watts_MAX_diarios/9)*2))display1.drawBitmap(50, 10, myBitmapPower_Level9,  23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*2) && Potencia < ((Watts_MAX_diarios/9)*3))display1.drawBitmap(50, 10, myBitmapPower_Level7,  23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*3) && Potencia < ((Watts_MAX_diarios/9)*4))display1.drawBitmap(50, 10, myBitmapPower_Level5,  23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*4) && Potencia < ((Watts_MAX_diarios/9)*5))display1.drawBitmap(50, 10, myBitmapPower_Level6,  23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*5) && Potencia < ((Watts_MAX_diarios/9)*6))display1.drawBitmap(50, 10, myBitmapPower_Level4,  23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*6) && Potencia < ((Watts_MAX_diarios/9)*7))display1.drawBitmap(50, 10, myBitmapPower_Level1,  23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*7) && Potencia < ((Watts_MAX_diarios/9)*8))display1.drawBitmap(50, 10, myBitmapPower_Level2,  23, 6, 1);
    if (Potencia >= ((Watts_MAX_diarios/9)*9) && Potencia < Watts_MAX_diarios)display1.drawBitmap(50, 10, myBitmapPower_Level3,  23, 6, 1);

      if (costo_TOTAL >= Escala_costo){Escala_costo = Escala_costo+100000;}

    if (costo_TOTAL >= 0 && costo_TOTAL < ((Escala_costo/9)*1))display1.drawBitmap(50, 18, myBitmapcash_1, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*1) && costo_TOTAL < ((Escala_costo/9)*2))display1.drawBitmap(50, 18, myBitmapcash_2, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*2) && costo_TOTAL < ((Escala_costo/9)*3))display1.drawBitmap(50, 18, myBitmapcash_3, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*3) && costo_TOTAL < ((Escala_costo/9)*4))display1.drawBitmap(50, 18, myBitmapcash_4, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*4) && costo_TOTAL < ((Escala_costo/9)*5))display1.drawBitmap(50, 18, myBitmapcash_5, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*5) && costo_TOTAL < ((Escala_costo/9)*6))display1.drawBitmap(50, 18, myBitmapcash_6, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*6) && costo_TOTAL < ((Escala_costo/9)*7))display1.drawBitmap(50, 18, myBitmapcash_7, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*7) && costo_TOTAL < ((Escala_costo/9)*8))display1.drawBitmap(50, 18, myBitmapcash_8, 13, 17, 1);
    if (costo_TOTAL >= ((Escala_costo/9)*9) && costo_TOTAL < Escala_costo)display1.drawBitmap(50, 18, myBitmapcash_9, 13, 17, 1);
  }
}
void Joint_420_HD() {

  if (Loop_WIFI == 100 )Loop_WIFI = 0;
  unsigned long Tiempo_Actual_OLED = millis();

  if (Tiempo_Actual_OLED - Tiempo_Previo_OLED >= intervalo_Oled) {
    Tiempo_Previo_OLED = Tiempo_Actual_OLED;

    Loop_WIFI ++;

    if (Loop_WIFI >= 0 && Loop_WIFI < 3)display1.drawBitmap(0, 0, epd_bitmap_Joint_1, 128, 64, 1);
    if (Loop_WIFI >= 3 && Loop_WIFI < 6)display1.drawBitmap(0, 0, epd_bitmap_Joint_2, 128, 64, 1);
    if (Loop_WIFI >= 6 && Loop_WIFI < 9)display1.drawBitmap(0, 0, epd_bitmap_Joint_3, 128, 64, 1);
    if (Loop_WIFI >= 9 && Loop_WIFI < 12)display1.drawBitmap(0, 0, epd_bitmap_Joint_4, 128, 64, 1);
    if (Loop_WIFI >= 12 && Loop_WIFI < 18)display1.drawBitmap(0, 0, epd_bitmap_Joint_5, 128, 64, 1);
    if (Loop_WIFI >= 18 && Loop_WIFI < 21)display1.drawBitmap(0, 0, epd_bitmap_Joint_6, 128, 64, 1);
    if (Loop_WIFI >= 21 && Loop_WIFI < 24)display1.drawBitmap(0, 0, epd_bitmap_Joint_7, 128, 64, 1);
    if (Loop_WIFI >= 24 && Loop_WIFI < 27)display1.drawBitmap(0, 0, epd_bitmap_Joint_8, 128, 64, 1);
    if (Loop_WIFI >= 27 && Loop_WIFI < 30)display1.drawBitmap(0, 0, epd_bitmap_Joint_9, 128, 64, 1);
    if (Loop_WIFI >= 30 && Loop_WIFI < 33)display1.drawBitmap(0, 0, epd_bitmap_Joint_10, 128, 64, 1);
    if (Loop_WIFI >= 33 && Loop_WIFI < 36)display1.drawBitmap(0, 0, epd_bitmap_Joint_11, 128, 64, 1);
    if (Loop_WIFI >= 36 && Loop_WIFI < 39)display1.drawBitmap(0, 0, epd_bitmap_Joint_12, 128, 64, 1);
    if (Loop_WIFI >= 39 && Loop_WIFI < 42)display1.drawBitmap(0, 0, epd_bitmap_Joint_13, 128, 64, 1);
    if (Loop_WIFI >= 42 && Loop_WIFI < 45)display1.drawBitmap(0, 0, epd_bitmap_Joint_14, 128, 64, 1);
    if (Loop_WIFI >= 45 && Loop_WIFI < 48)display1.drawBitmap(0, 0, epd_bitmap_Joint_15, 128, 64, 1);
    if (Loop_WIFI >= 48 && Loop_WIFI < 51)display1.drawBitmap(0, 0, epd_bitmap_Joint_16, 128, 64, 1);
    if (Loop_WIFI >= 51 && Loop_WIFI < 54)display1.drawBitmap(0, 0, epd_bitmap_Joint_17, 128, 64, 1);

    display1.setTextSize(1);
    display1.setTextColor(WHITE);
    display1.setCursor(26, 51);
    display1.println("Enjoy de Joint!");

    if (Loop_WIFI >= 54 && Loop_WIFI < 57)display1.drawBitmap(0, 0, epd_bitmap_Joint_18, 128, 64, 1);
    if (Loop_WIFI >= 57 && Loop_WIFI < 60)display1.drawBitmap(0, 0, epd_bitmap_Joint_19, 128, 64, 1);
    if (Loop_WIFI >= 60 && Loop_WIFI < 63)display1.drawBitmap(0, 0, epd_bitmap_Joint_20, 128, 64, 1);
    if (Loop_WIFI >= 63 && Loop_WIFI < 67)display1.drawBitmap(0, 0, epd_bitmap_Joint_21, 128, 64, 1);
    if (Loop_WIFI >= 67 && Loop_WIFI < 70)display1.drawBitmap(0, 0, epd_bitmap_Joint_22, 128, 64, 1);
    if (Loop_WIFI >= 70 && Loop_WIFI < 74)display1.drawBitmap(0, 0, epd_bitmap_Joint_23, 128, 64, 1);
    if (Loop_WIFI >= 74 && Loop_WIFI < 78)display1.drawBitmap(0, 0, epd_bitmap_Joint_24, 128, 64, 1);
    if (Loop_WIFI >= 78 && Loop_WIFI < 82)display1.drawBitmap(0, 0, epd_bitmap_Joint_25, 128, 64, 1);
    if (Loop_WIFI >= 82 && Loop_WIFI < 86)display1.drawBitmap(0, 0, epd_bitmap_Joint_26, 128, 64, 1);
    if (Loop_WIFI >= 86 && Loop_WIFI < 90)display1.drawBitmap(0, 0, epd_bitmap_Joint_27, 128, 64, 1);
    if (Loop_WIFI >= 90 && Loop_WIFI < 94)display1.drawBitmap(0, 0, epd_bitmap_Joint_28, 128, 64, 1);
    if (Loop_WIFI >= 94 && Loop_WIFI < 96)display1.drawBitmap(0, 0, epd_bitmap_Joint_29, 128, 64, 1);
    if (Loop_WIFI >= 96 && Loop_WIFI < 101)display1.drawBitmap(0, 0, epd_bitmap_Joint_30, 128, 64, 1);

    display1.display();
    display1.clearDisplay();
  }
}

void Wifi_OK_Enviado() {

  display1.clearDisplay();
  display1.drawBitmap(0, 0, Wifi_Ok, ANCHO, ALTO, 1);
  display1.display();

  display1.setTextSize(1);
  display1.setTextColor(WHITE);
  display1.setCursor(22, 52);
  display1.println("WiFi Conectado");
  display1.display();
  delay(pausa);
  display1.invertDisplay(true);
  delay(pausa);
  display1.invertDisplay(false);
  delay(pausa);
  display1.invertDisplay(true);
  delay(pausa);
  display1.invertDisplay(false);
  delay(pausa);
  display1.invertDisplay(true);
  delay(pausa);
  display1.invertDisplay(false);
  delay(pausa);
  display1.clearDisplay();
}
void Micro_sd() {

  display1.drawBitmap(0, 0,  sd , ANCHO, ALTO, 1);
  display1.display();
  delay(250);
  display1.clearDisplay();
}
